/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
import { AIForgedBase } from "./AIForgedBase.js";
export class AccountClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get info for current user
     * @param x_Api_Version (optional)
     * @return User data
     */
    getCurrentUser(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCurrentUser(_response));
        });
    }
    processGetCurrentUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get api key
     * @param userId (optional)
     * @param x_Api_Version (optional)
     * @return API-Key
     */
    getApiKey(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetAPIKey?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetApiKey(_response));
        });
    }
    processGetApiKey(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get user by Id
     * @param userid (optional) The user id
     * @param x_Api_Version (optional)
     */
    getById(userid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetById?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetById(_response));
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get user info by username
     * @param userName (optional)
     * @param x_Api_Version (optional)
     */
    getByUserName(userName, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetByUserName?";
        if (userName !== undefined && userName !== null)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByUserName(_response));
        });
    }
    processGetByUserName(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find users
     * @param filter (optional)
     * @param x_Api_Version (optional)
     */
    find(filter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/Find?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processFind(_response));
        });
    }
    processFind(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get count of users
     * @param filter (optional)
     * @param x_Api_Version (optional)
     */
    getUserCount(filter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetUserCount?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetUserCount(_response));
        });
    }
    processGetUserCount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all users
     * @param x_Api_Version (optional)
     */
    getAll(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get users paged
     * @param filter (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param x_Api_Version (optional)
     */
    getPaged(filter, page, pageSize, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetPaged?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPaged(_response));
        });
    }
    processGetPaged(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update current user
     * @param x_Api_Version (optional)
     */
    updateCurrentUser(x_Api_Version, user) {
        let url_ = this.baseUrl + "/api/Account/UpdateCurrentUser";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(user);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateCurrentUser(_response));
        });
    }
    processUpdateCurrentUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Patch current user
     * @param x_Api_Version (optional)
     */
    patchUpdateCurrentUser(x_Api_Version, patch) {
        let url_ = this.baseUrl + "/api/Account/PatchUpdateCurrentUser";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(patch);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processPatchUpdateCurrentUser(_response));
        });
    }
    processPatchUpdateCurrentUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a different users
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    update(userid, x_Api_Version, user) {
        let url_ = this.baseUrl + "/api/Account/Update?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(user);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Patch a different user
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    patchUpdate(userid, x_Api_Version, patch) {
        let url_ = this.baseUrl + "/api/Account/PatchUpdate?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(patch);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processPatchUpdate(_response));
        });
    }
    processPatchUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new user
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, x_Api_Version, user) {
        let url_ = this.baseUrl + "/api/Account/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(user);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a user
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    delete(userid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/Delete?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Unblock a user
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    unblockUser(userid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/UnblockUser?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUnblockUser(_response));
        });
    }
    processUnblockUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Unblock a user
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    blockUser(userid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/BlockUser?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBlockUser(_response));
        });
    }
    processBlockUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Activate a user account
     * @param userid (optional)
     * @param x_Api_Version (optional)
     */
    activateUser(userid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/ActivateUser?";
        if (userid !== undefined && userid !== null)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processActivateUser(_response));
        });
    }
    processActivateUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Register a new user account
     * @param x_Api_Version (optional)
     */
    register(x_Api_Version, user) {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(user);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRegister(_response));
        });
    }
    processRegister(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Send a registration email
     * @param x_Api_Version (optional)
     */
    sendRegistrationMail(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Account/SendRegistrationMail";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSendRegistrationMail(_response));
        });
    }
    processSendRegistrationMail(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Activate a new user account
     * @param x_Api_Version (optional)
     */
    activateAccount(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Account/ActivateAccount";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processActivateAccount(_response));
        });
    }
    processActivateAccount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Request a reset a user account
     * @param x_Api_Version (optional)
     */
    passwordResetRequest(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Account/PasswordResetRequest";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processPasswordResetRequest(_response));
        });
    }
    processPasswordResetRequest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Reset a password request
     * @param x_Api_Version (optional)
     */
    passwordReset(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Account/PasswordReset";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processPasswordReset(_response));
        });
    }
    processPasswordReset(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get list of current user login providers
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getUserLoginProviders(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Account/GetUserLoginProviders?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetUserLoginProviders(_response));
        });
    }
    processGetUserLoginProviders(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserLoginInfo.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get list of current user login providers
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    deleteUserLoginProvider(userId, x_Api_Version, logininfo) {
        let url_ = this.baseUrl + "/api/Account/DeleteUserLoginProvider?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(logininfo);
        let options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteUserLoginProvider(_response));
        });
    }
    processDeleteUserLoginProvider(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserLoginInfo.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class BundlesClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get all bundles
     * @param x_Api_Version (optional)
     */
    getAll(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Bundles/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(BundlesViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new bundle
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, bundle) {
        let url_ = this.baseUrl + "/api/Bundles/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(bundle);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BundlesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a bundle
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, bundle) {
        let url_ = this.baseUrl + "/api/Bundles/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(bundle);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BundlesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a bundle
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Bundles/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BundlesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ClassesClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get a classification
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    get(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Classes/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClassesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all categories by project
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    getByProject(projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Classes/GetByProject?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByProject(_response));
        });
    }
    processGetByProject(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ClassesViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get by user and project
     * @param userId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    getByUser(userId, projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Classes/GetByUser?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByUser(_response));
        });
    }
    processGetByUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ClassesViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new category
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, newclass) {
        let url_ = this.baseUrl + "/api/Classes/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(newclass);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClassesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a category
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, docclass) {
        let url_ = this.baseUrl + "/api/Classes/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(docclass);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClassesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a category
     * @param userId (optional)
     * @param projectId (optional)
     * @param classId (optional)
     * @param x_Api_Version (optional)
     */
    delete(userId, projectId, classId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Classes/Delete?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (classId === null)
            throw new Error("The parameter 'classId' cannot be null.");
        else if (classId !== undefined)
            url_ += "classId=" + encodeURIComponent("" + classId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ContactClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get Contacts
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    get(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Contact/Get?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ContactViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create contacts
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, x_Api_Version, contact) {
        let url_ = this.baseUrl + "/api/Contact/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(contact);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ContactViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update contacts
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, contact) {
        let url_ = this.baseUrl + "/api/Contact/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(contact);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ContactViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Contact/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ContactViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class DataSetClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get custom dataset and data
     * @param docid (optional)
     * @param defId (optional)
     * @param includeData (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortFieldDefId (optional)
     * @param sortDirection (optional)
     * @param searchFilter (optional)
     * @param x_Api_Version (optional)
     */
    get(docid, defId, includeData, pageNo, pageSize, sortFieldDefId, sortDirection, searchFilter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/Get?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (includeData === null)
            throw new Error("The parameter 'includeData' cannot be null.");
        else if (includeData !== undefined)
            url_ += "includeData=" + encodeURIComponent("" + includeData) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortFieldDefId !== undefined && sortFieldDefId !== null)
            url_ += "sortFieldDefId=" + encodeURIComponent("" + sortFieldDefId) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (searchFilter !== undefined && searchFilter !== null)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSet.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Extract custom dataset
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param dataSetName (optional)
     * @param includeData (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortFieldDefId (optional)
     * @param sortDirection (optional)
     * @param searchFilter (optional)
     * @param x_Api_Version (optional)
     */
    getByName(projectId, stpdId, dataSetName, includeData, pageNo, pageSize, sortFieldDefId, sortDirection, searchFilter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/GetByName?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (dataSetName !== undefined && dataSetName !== null)
            url_ += "dataSetName=" + encodeURIComponent("" + dataSetName) + "&";
        if (includeData === null)
            throw new Error("The parameter 'includeData' cannot be null.");
        else if (includeData !== undefined)
            url_ += "includeData=" + encodeURIComponent("" + includeData) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortFieldDefId !== undefined && sortFieldDefId !== null)
            url_ += "sortFieldDefId=" + encodeURIComponent("" + sortFieldDefId) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (searchFilter !== undefined && searchFilter !== null)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByName(_response));
        });
    }
    processGetByName(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSet.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Extract custom dataset
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param pdId (optional)
     * @param includeData (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortFieldDefId (optional)
     * @param sortDirection (optional)
     * @param searchFilter (optional)
     * @param x_Api_Version (optional)
     */
    getByDef(projectId, stpdId, pdId, includeData, pageNo, pageSize, sortFieldDefId, sortDirection, searchFilter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/GetByDef?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (pdId === null)
            throw new Error("The parameter 'pdId' cannot be null.");
        else if (pdId !== undefined)
            url_ += "pdId=" + encodeURIComponent("" + pdId) + "&";
        if (includeData === null)
            throw new Error("The parameter 'includeData' cannot be null.");
        else if (includeData !== undefined)
            url_ += "includeData=" + encodeURIComponent("" + includeData) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortFieldDefId !== undefined && sortFieldDefId !== null)
            url_ += "sortFieldDefId=" + encodeURIComponent("" + sortFieldDefId) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (searchFilter !== undefined && searchFilter !== null)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByDef(_response));
        });
    }
    processGetByDef(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSet.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all datasets
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    getAll(projectId, stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/GetAll?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CustomDataSet.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new empty custom dataset
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param dataSetName (optional)
     * @param x_Api_Version (optional)
     */
    create(projectId, stpdId, dataSetName, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/Create?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (dataSetName !== undefined && dataSetName !== null)
            url_ += "dataSetName=" + encodeURIComponent("" + dataSetName) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSet.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete custom dataset
     * @param docid (optional)
     * @param defId (optional)
     * @param definition (optional)
     * @param x_Api_Version (optional)
     */
    delete(docid, defId, definition, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/Delete?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (definition === null)
            throw new Error("The parameter 'definition' cannot be null.");
        else if (definition !== undefined)
            url_ += "definition=" + encodeURIComponent("" + definition) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a custom dataset record
     * @param docid (optional)
     * @param defId (optional)
     * @param keyId (optional)
     * @param includeVerifications (optional)
     * @param x_Api_Version (optional)
     */
    getRecord(docid, defId, keyId, includeVerifications, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/GetRecord?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (keyId === null)
            throw new Error("The parameter 'keyId' cannot be null.");
        else if (keyId !== undefined)
            url_ += "keyId=" + encodeURIComponent("" + keyId) + "&";
        if (includeVerifications === null)
            throw new Error("The parameter 'includeVerifications' cannot be null.");
        else if (includeVerifications !== undefined)
            url_ += "includeVerifications=" + encodeURIComponent("" + includeVerifications) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRecord(_response));
        });
    }
    processGetRecord(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSetRecord.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find a custom dataset by key
     * @param docid (optional)
     * @param defId (optional)
     * @param keyValue (optional)
     * @param includeVerifications (optional)
     * @param x_Api_Version (optional)
     */
    getRecordByKeyValue(docid, defId, keyValue, includeVerifications, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/GetRecordByKeyValue?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (keyValue !== undefined && keyValue !== null)
            url_ += "keyValue=" + encodeURIComponent("" + keyValue) + "&";
        if (includeVerifications === null)
            throw new Error("The parameter 'includeVerifications' cannot be null.");
        else if (includeVerifications !== undefined)
            url_ += "includeVerifications=" + encodeURIComponent("" + includeVerifications) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRecordByKeyValue(_response));
        });
    }
    processGetRecordByKeyValue(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CustomDataSetRecord.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a custom dataset record by key id
     * @param docid (optional)
     * @param defId (optional)
     * @param keyId (optional)
     * @param x_Api_Version (optional)
     */
    deleteRecord(docid, defId, keyId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/DeleteRecord?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (keyId === null)
            throw new Error("The parameter 'keyId' cannot be null.");
        else if (keyId !== undefined)
            url_ += "keyId=" + encodeURIComponent("" + keyId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteRecord(_response));
        });
    }
    processDeleteRecord(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CustomDataSetRecord.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete multiple custom dataset records by key ids
     * @param docid (optional)
     * @param defId (optional)
     * @param x_Api_Version (optional)
     */
    deleteRecords(docid, defId, x_Api_Version, keyIds) {
        let url_ = this.baseUrl + "/api/DataSet/DeleteRecords?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(keyIds);
        let options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteRecords(_response));
        });
    }
    processDeleteRecords(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CustomDataSetRecord.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a custom dataset record by key value
     * @param docid (optional)
     * @param defId (optional)
     * @param keyValue (optional)
     * @param x_Api_Version (optional)
     */
    deleteRecordByKeyValue(docid, defId, keyValue, x_Api_Version) {
        let url_ = this.baseUrl + "/api/DataSet/DeleteByKeyValue?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (defId === null)
            throw new Error("The parameter 'defId' cannot be null.");
        else if (defId !== undefined)
            url_ += "defId=" + encodeURIComponent("" + defId) + "&";
        if (keyValue !== undefined && keyValue !== null)
            url_ += "keyValue=" + encodeURIComponent("" + keyValue) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteRecordByKeyValue(_response));
        });
    }
    processDeleteRecordByKeyValue(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CustomDataSetRecord.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save custom dataset
     * @param mergeData (optional)
     * @param x_Api_Version (optional)
     */
    save(mergeData, x_Api_Version, dataset) {
        let url_ = this.baseUrl + "/api/DataSet/Save?";
        if (mergeData === null)
            throw new Error("The parameter 'mergeData' cannot be null.");
        else if (mergeData !== undefined)
            url_ += "mergeData=" + encodeURIComponent("" + mergeData) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dataset);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSave(_response));
        });
    }
    processSave(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class DocumentClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get a document by Id
     * @param id (optional) Document Id
     * @param x_Api_Version (optional)
     */
    getDocument(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetDocument(_response));
        });
    }
    processGetDocument(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a document and its related documents
     * @param id (optional) Document Id
     * @param x_Api_Version (optional)
     */
    getHierarchy(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetHierarchy?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHierarchy(_response));
        });
    }
    processGetHierarchy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a document
     * @param x_Api_Version (optional)
     * @param document The document
     */
    update(x_Api_Version, document) {
        let url_ = this.baseUrl + "/api/Document/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(document);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a document
     * @param id (optional) Document Id
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete multiple documents
     * @param ids (optional) The document Ids to delete
     * @param x_Api_Version (optional)
     */
    deleteMulti(ids, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/DeleteMulti?";
        if (ids !== undefined && ids !== null)
            ids && ids.forEach(item => { url_ += "Ids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteMulti(_response));
        });
    }
    processDeleteMulti(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Copy a document to another project/service and supply a new status and usage
     * @param projectId (optional) Destination project
     * @param stpdId (optional) Destination service
     * @param status (optional) New status
     * @param usage (optional) New usage
     * @param includeAllData (optional) Include all image date
     * @param docIds (optional) List of socument Ids to copy
     * @param x_Api_Version (optional)
     */
    copy(projectId, stpdId, status, usage, includeAllData, docIds, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/Copy?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (includeAllData === null)
            throw new Error("The parameter 'includeAllData' cannot be null.");
        else if (includeAllData !== undefined)
            url_ += "includeAllData=" + encodeURIComponent("" + includeAllData) + "&";
        if (docIds !== undefined && docIds !== null)
            docIds && docIds.forEach(item => { url_ += "docIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCopy(_response));
        });
    }
    processCopy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Move a document to another project and service
     * @param projectId (optional)
     * @param toStpdId (optional)
     * @param toStatus (optional)
     * @param toUsage (optional)
     * @param docIds (optional)
     * @param x_Api_Version (optional)
     */
    move(projectId, toStpdId, toStatus, toUsage, docIds, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/Move?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (toStpdId === null)
            throw new Error("The parameter 'toStpdId' cannot be null.");
        else if (toStpdId !== undefined)
            url_ += "toStpdId=" + encodeURIComponent("" + toStpdId) + "&";
        if (toStatus === null)
            throw new Error("The parameter 'toStatus' cannot be null.");
        else if (toStatus !== undefined)
            url_ += "toStatus=" + encodeURIComponent("" + toStatus) + "&";
        if (toUsage === null)
            throw new Error("The parameter 'toUsage' cannot be null.");
        else if (toUsage !== undefined)
            url_ += "toUsage=" + encodeURIComponent("" + toUsage) + "&";
        if (docIds !== undefined && docIds !== null)
            docIds && docIds.forEach(item => { url_ += "docIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processMove(_response));
        });
    }
    processMove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Bulk Copy document by status and usage to another service
     * @param projectFromId (optional)
     * @param stpdIdFrom (optional)
     * @param statusFrom (optional)
     * @param usageFrom (optional)
     * @param projectToId (optional)
     * @param stpdIdTo (optional)
     * @param statusTo (optional)
     * @param usageTo (optional)
     * @param includeAllData (optional)
     * @param x_Api_Version (optional)
     */
    bulkCopy(projectFromId, stpdIdFrom, statusFrom, usageFrom, projectToId, stpdIdTo, statusTo, usageTo, includeAllData, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/BulkCopy?";
        if (projectFromId === null)
            throw new Error("The parameter 'projectFromId' cannot be null.");
        else if (projectFromId !== undefined)
            url_ += "projectFromId=" + encodeURIComponent("" + projectFromId) + "&";
        if (stpdIdFrom === null)
            throw new Error("The parameter 'stpdIdFrom' cannot be null.");
        else if (stpdIdFrom !== undefined)
            url_ += "stpdIdFrom=" + encodeURIComponent("" + stpdIdFrom) + "&";
        if (statusFrom === null)
            throw new Error("The parameter 'statusFrom' cannot be null.");
        else if (statusFrom !== undefined)
            url_ += "statusFrom=" + encodeURIComponent("" + statusFrom) + "&";
        if (usageFrom === null)
            throw new Error("The parameter 'usageFrom' cannot be null.");
        else if (usageFrom !== undefined)
            url_ += "usageFrom=" + encodeURIComponent("" + usageFrom) + "&";
        if (projectToId === null)
            throw new Error("The parameter 'projectToId' cannot be null.");
        else if (projectToId !== undefined)
            url_ += "projectToId=" + encodeURIComponent("" + projectToId) + "&";
        if (stpdIdTo === null)
            throw new Error("The parameter 'stpdIdTo' cannot be null.");
        else if (stpdIdTo !== undefined)
            url_ += "stpdIdTo=" + encodeURIComponent("" + stpdIdTo) + "&";
        if (statusTo === null)
            throw new Error("The parameter 'statusTo' cannot be null.");
        else if (statusTo !== undefined)
            url_ += "statusTo=" + encodeURIComponent("" + statusTo) + "&";
        if (usageTo === null)
            throw new Error("The parameter 'usageTo' cannot be null.");
        else if (usageTo !== undefined)
            url_ += "usageTo=" + encodeURIComponent("" + usageTo) + "&";
        if (includeAllData === null)
            throw new Error("The parameter 'includeAllData' cannot be null.");
        else if (includeAllData !== undefined)
            url_ += "includeAllData=" + encodeURIComponent("" + includeAllData) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBulkCopy(_response));
        });
    }
    processBulkCopy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Bulk update document by status and usage
     * @param projectId (optional)
     * @param stpdIdFrom (optional)
     * @param statusFrom (optional)
     * @param usageFrom (optional)
     * @param statusTo (optional)
     * @param usageTo (optional)
     * @param x_Api_Version (optional)
     */
    bulkUpdate(projectId, stpdIdFrom, statusFrom, usageFrom, statusTo, usageTo, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/BulkUpdate?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdIdFrom === null)
            throw new Error("The parameter 'stpdIdFrom' cannot be null.");
        else if (stpdIdFrom !== undefined)
            url_ += "stpdIdFrom=" + encodeURIComponent("" + stpdIdFrom) + "&";
        if (statusFrom === null)
            throw new Error("The parameter 'statusFrom' cannot be null.");
        else if (statusFrom !== undefined)
            url_ += "statusFrom=" + encodeURIComponent("" + statusFrom) + "&";
        if (usageFrom === null)
            throw new Error("The parameter 'usageFrom' cannot be null.");
        else if (usageFrom !== undefined)
            url_ += "usageFrom=" + encodeURIComponent("" + usageFrom) + "&";
        if (statusTo === null)
            throw new Error("The parameter 'statusTo' cannot be null.");
        else if (statusTo !== undefined)
            url_ += "statusTo=" + encodeURIComponent("" + statusTo) + "&";
        if (usageTo === null)
            throw new Error("The parameter 'usageTo' cannot be null.");
        else if (usageTo !== undefined)
            url_ += "usageTo=" + encodeURIComponent("" + usageTo) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBulkUpdate(_response));
        });
    }
    processBulkUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Bulk Mode document by status and usage to another service
     * @param projectFromId (optional)
     * @param stpdIdFrom (optional)
     * @param statusFrom (optional)
     * @param usageFrom (optional)
     * @param projectToId (optional)
     * @param stpdIdTo (optional)
     * @param statusTo (optional)
     * @param usageTo (optional)
     * @param x_Api_Version (optional)
     */
    bulkMove(projectFromId, stpdIdFrom, statusFrom, usageFrom, projectToId, stpdIdTo, statusTo, usageTo, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/BulkMove?";
        if (projectFromId === null)
            throw new Error("The parameter 'projectFromId' cannot be null.");
        else if (projectFromId !== undefined)
            url_ += "projectFromId=" + encodeURIComponent("" + projectFromId) + "&";
        if (stpdIdFrom === null)
            throw new Error("The parameter 'stpdIdFrom' cannot be null.");
        else if (stpdIdFrom !== undefined)
            url_ += "stpdIdFrom=" + encodeURIComponent("" + stpdIdFrom) + "&";
        if (statusFrom === null)
            throw new Error("The parameter 'statusFrom' cannot be null.");
        else if (statusFrom !== undefined)
            url_ += "statusFrom=" + encodeURIComponent("" + statusFrom) + "&";
        if (usageFrom === null)
            throw new Error("The parameter 'usageFrom' cannot be null.");
        else if (usageFrom !== undefined)
            url_ += "usageFrom=" + encodeURIComponent("" + usageFrom) + "&";
        if (projectToId === null)
            throw new Error("The parameter 'projectToId' cannot be null.");
        else if (projectToId !== undefined)
            url_ += "projectToId=" + encodeURIComponent("" + projectToId) + "&";
        if (stpdIdTo === null)
            throw new Error("The parameter 'stpdIdTo' cannot be null.");
        else if (stpdIdTo !== undefined)
            url_ += "stpdIdTo=" + encodeURIComponent("" + stpdIdTo) + "&";
        if (statusTo === null)
            throw new Error("The parameter 'statusTo' cannot be null.");
        else if (statusTo !== undefined)
            url_ += "statusTo=" + encodeURIComponent("" + statusTo) + "&";
        if (usageTo === null)
            throw new Error("The parameter 'usageTo' cannot be null.");
        else if (usageTo !== undefined)
            url_ += "usageTo=" + encodeURIComponent("" + usageTo) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBulkMove(_response));
        });
    }
    processBulkMove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Bulk change document classes by status and usage
     * @param projectId (optional)
     * @param stpdIdFrom (optional)
     * @param statusFrom (optional)
     * @param usageFrom (optional)
     * @param fromClassId (optional)
     * @param toClassId (optional)
     * @param x_Api_Version (optional)
     */
    bulkClassChange(projectId, stpdIdFrom, statusFrom, usageFrom, fromClassId, toClassId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/BulkClassChange?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdIdFrom === null)
            throw new Error("The parameter 'stpdIdFrom' cannot be null.");
        else if (stpdIdFrom !== undefined)
            url_ += "stpdIdFrom=" + encodeURIComponent("" + stpdIdFrom) + "&";
        if (statusFrom === null)
            throw new Error("The parameter 'statusFrom' cannot be null.");
        else if (statusFrom !== undefined)
            url_ += "statusFrom=" + encodeURIComponent("" + statusFrom) + "&";
        if (usageFrom === null)
            throw new Error("The parameter 'usageFrom' cannot be null.");
        else if (usageFrom !== undefined)
            url_ += "usageFrom=" + encodeURIComponent("" + usageFrom) + "&";
        if (fromClassId !== undefined && fromClassId !== null)
            url_ += "fromClassId=" + encodeURIComponent("" + fromClassId) + "&";
        if (toClassId === null)
            throw new Error("The parameter 'toClassId' cannot be null.");
        else if (toClassId !== undefined)
            url_ += "toClassId=" + encodeURIComponent("" + toClassId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBulkClassChange(_response));
        });
    }
    processBulkClassChange(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find latest child document to assist with verification
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param filename (optional)
     * @param classname (optional)
     * @param masterid (optional)
     * @param x_Api_Version (optional)
     */
    findLatestChild(userId, projectId, stpdId, usage, statuses, filename, classname, masterid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/FindLatestChild?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (filename !== undefined && filename !== null)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&";
        if (classname !== undefined && classname !== null)
            url_ += "classname=" + encodeURIComponent("" + classname) + "&";
        if (masterid === null)
            throw new Error("The parameter 'masterid' cannot be null.");
        else if (masterid !== undefined)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processFindLatestChild(_response));
        });
    }
    processFindLatestChild(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get preview documents and images for a service
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    getPreviews(userId, projectId, stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetPreviews?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPreviews(_response));
        });
    }
    processGetPreviews(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find documnets by using structured search criteria
    This results can be paged
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param classname (optional)
     * @param filename (optional)
     * @param filetype (optional)
     * @param start (optional)
     * @param end (optional)
     * @param masterid (optional)
     * @param includeparamdefcategories (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDirection (optional)
     * @param comment (optional)
     * @param result (optional)
     * @param resultId (optional)
     * @param resultIndex (optional)
     * @param externalId (optional)
     * @param docGuid (optional)
     * @param x_Api_Version (optional)
     */
    getExtended(userId, projectId, stpdId, usage, statuses, classname, filename, filetype, start, end, masterid, includeparamdefcategories, pageNo, pageSize, sortField, sortDirection, comment, result, resultId, resultIndex, externalId, docGuid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetExtended?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage !== undefined && usage !== null)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (classname !== undefined && classname !== null)
            url_ += "classname=" + encodeURIComponent("" + classname) + "&";
        if (filename !== undefined && filename !== null)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&";
        if (filetype !== undefined && filetype !== null)
            url_ += "filetype=" + encodeURIComponent("" + filetype) + "&";
        if (start !== undefined && start !== null)
            url_ += "start=" + encodeURIComponent(start ? "" + start.toISOString() : "") + "&";
        if (end !== undefined && end !== null)
            url_ += "end=" + encodeURIComponent(end ? "" + end.toISOString() : "") + "&";
        if (masterid !== undefined && masterid !== null)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        if (includeparamdefcategories !== undefined && includeparamdefcategories !== null)
            includeparamdefcategories && includeparamdefcategories.forEach(item => { url_ += "includeparamdefcategories=" + encodeURIComponent("" + item) + "&"; });
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (result !== undefined && result !== null)
            url_ += "result=" + encodeURIComponent("" + result) + "&";
        if (resultId !== undefined && resultId !== null)
            url_ += "resultId=" + encodeURIComponent("" + resultId) + "&";
        if (resultIndex !== undefined && resultIndex !== null)
            url_ += "resultIndex=" + encodeURIComponent("" + resultIndex) + "&";
        if (externalId !== undefined && externalId !== null)
            url_ += "externalId=" + encodeURIComponent("" + externalId) + "&";
        if (docGuid !== undefined && docGuid !== null)
            url_ += "docGuid=" + encodeURIComponent("" + docGuid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetExtended(_response));
        });
    }
    processGetExtended(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find documnets count by using structured search criteria
    This is used to detemine paging
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param classname (optional)
     * @param filename (optional)
     * @param filetype (optional)
     * @param start (optional)
     * @param end (optional)
     * @param masterid (optional)
     * @param comment (optional)
     * @param result (optional)
     * @param resultId (optional)
     * @param resultIndex (optional)
     * @param externalId (optional)
     * @param docGuid (optional)
     * @param x_Api_Version (optional)
     */
    getExtendedCount(userId, projectId, stpdId, usage, statuses, classname, filename, filetype, start, end, masterid, comment, result, resultId, resultIndex, externalId, docGuid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetExtendedCount?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage !== undefined && usage !== null)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (classname !== undefined && classname !== null)
            url_ += "classname=" + encodeURIComponent("" + classname) + "&";
        if (filename !== undefined && filename !== null)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&";
        if (filetype !== undefined && filetype !== null)
            url_ += "filetype=" + encodeURIComponent("" + filetype) + "&";
        if (start !== undefined && start !== null)
            url_ += "start=" + encodeURIComponent(start ? "" + start.toISOString() : "") + "&";
        if (end !== undefined && end !== null)
            url_ += "end=" + encodeURIComponent(end ? "" + end.toISOString() : "") + "&";
        if (masterid !== undefined && masterid !== null)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (result !== undefined && result !== null)
            url_ += "result=" + encodeURIComponent("" + result) + "&";
        if (resultId !== undefined && resultId !== null)
            url_ += "resultId=" + encodeURIComponent("" + resultId) + "&";
        if (resultIndex !== undefined && resultIndex !== null)
            url_ += "resultIndex=" + encodeURIComponent("" + resultIndex) + "&";
        if (externalId !== undefined && externalId !== null)
            url_ += "externalId=" + encodeURIComponent("" + externalId) + "&";
        if (docGuid !== undefined && docGuid !== null)
            url_ += "docGuid=" + encodeURIComponent("" + docGuid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetExtendedCount(_response));
        });
    }
    processGetExtendedCount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a summary of documents for analytics
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param classname (optional)
     * @param masterid (optional)
     * @param interval (optional)
     * @param getLabelledStats (optional)
     * @param x_Api_Version (optional)
     */
    getExSummary(userId, projectId, stpdId, usage, statuses, classname, masterid, interval, getLabelledStats, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetExtendedSummary?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage !== undefined && usage !== null)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (classname !== undefined && classname !== null)
            url_ += "classname=" + encodeURIComponent("" + classname) + "&";
        if (masterid !== undefined && masterid !== null)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        if (interval !== undefined && interval !== null)
            url_ += "interval=" + encodeURIComponent("" + interval) + "&";
        if (getLabelledStats === null)
            throw new Error("The parameter 'getLabelledStats' cannot be null.");
        else if (getLabelledStats !== undefined)
            url_ += "getLabelledStats=" + encodeURIComponent("" + getLabelledStats) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetExSummary(_response));
        });
    }
    processGetExSummary(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentsSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get document images
     * @param id (optional) The document id
     * @param stpdId (optional) Service id
     * @param x_Api_Version (optional)
     */
    getImages(id, stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetImages?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetImages(_response));
        });
    }
    processGetImages(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentDataViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get document images
     * @param id (optional)
     * @param types (optional)
     * @param contentType (optional)
     * @param text (optional)
     * @param blobid (optional)
     * @param pageindex (optional)
     * @param imagesCount (optional)
     * @param x_Api_Version (optional)
     */
    getData(id, types, contentType, text, blobid, pageindex, imagesCount, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetData?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (types !== undefined && types !== null)
            types && types.forEach(item => { url_ += "types=" + encodeURIComponent("" + item) + "&"; });
        if (contentType !== undefined && contentType !== null)
            url_ += "contentType=" + encodeURIComponent("" + contentType) + "&";
        if (text !== undefined && text !== null)
            url_ += "text=" + encodeURIComponent("" + text) + "&";
        if (blobid !== undefined && blobid !== null)
            url_ += "blobid=" + encodeURIComponent("" + blobid) + "&";
        if (pageindex !== undefined && pageindex !== null)
            url_ += "pageindex=" + encodeURIComponent("" + pageindex) + "&";
        if (imagesCount !== undefined && imagesCount !== null)
            url_ += "imagesCount=" + encodeURIComponent("" + imagesCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetData(_response));
        });
    }
    processGetData(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentDataViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get system document
     * @param filename (optional)
     * @param x_Api_Version (optional)
     */
    getSystemDocument(filename, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetSystemDocument?";
        if (filename !== undefined && filename !== null)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSystemDocument(_response));
        });
    }
    processGetSystemDocument(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentDataViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getBlob(userId, id, types, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetBlob?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (types !== undefined && types !== null)
            types && types.forEach(item => { url_ += "types=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetBlob(_response));
        });
    }
    processGetBlob(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get blob by blob key
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getBlobById(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetBlobById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetBlobById(_response));
        });
    }
    processGetBlobById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a blob
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    updateBlob(userId, x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Document/UpdateBlob?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateBlob(_response));
        });
    }
    processUpdateBlob(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a document blob
     * @param userId (optional)
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteBlob(userId, id, x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Document/DeleteBlob?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteBlob(_response));
        });
    }
    processDeleteBlob(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Upload a document
     * @param stpdId (optional)
     * @param userId (optional)
     * @param projectId (optional)
     * @param classId (optional)
     * @param status (optional)
     * @param usage (optional)
     * @param masterid (optional)
     * @param x_Api_Version (optional)
     * @param data (optional)
     */
    upload(stpdId, userId, projectId, classId, status, usage, masterid, x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/Document/Upload?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (classId !== undefined && classId !== null)
            url_ += "classId=" + encodeURIComponent("" + classId) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (usage === null)
            throw new Error("The parameter 'usage' cannot be null.");
        else if (usage !== undefined)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (masterid !== undefined && masterid !== null)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (data !== null && data !== undefined)
            data.forEach(item_ => content_.append("data", item_.toString()));
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpload(_response));
        });
    }
    processUpload(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Store structured doument and containing data blob
     * @param stpdId (optional)
     * @param userId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    store(stpdId, userId, projectId, x_Api_Version, docs) {
        let url_ = this.baseUrl + "/api/Document/Store?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(docs);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processStore(_response));
        });
    }
    processStore(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Upload and classify a document
     * @param stpdId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     * @param file (optional)
     */
    classify(stpdId, projectId, x_Api_Version, file) {
        let url_ = this.baseUrl + "/api/Document/Classify?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processClassify(_response));
        });
    }
    processClassify(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Upload and extract information for verification
     * @param stpdId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     * @param file (optional)
     */
    extractAndVerify(stpdId, projectId, x_Api_Version, file) {
        let url_ = this.baseUrl + "/api/Document/ExtractAndVerify?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processExtractAndVerify(_response));
        });
    }
    processExtractAndVerify(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Upload get a document classification
     * @param stpdId (optional)
     * @param projectId (optional)
     * @param docId (optional)
     * @param x_Api_Version (optional)
     */
    getClassification(stpdId, projectId, docId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Document/GetClassification?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetClassification(_response));
        });
    }
    processGetClassification(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ClassesViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class MarketPlaceClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get marketplace items by using a filter
     * @param filter (optional)
     * @param x_Api_Version (optional)
     */
    get(filter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/Get?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get by user
     * @param userId (optional)
     * @param groupId (optional)
     * @param x_Api_Version (optional)
     */
    getByUser(userId, groupId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/GetByUser?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (groupId !== undefined && groupId !== null)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByUser(_response));
        });
    }
    processGetByUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Request access to market place
     * @param userId (optional)
     * @param projectId (optional)
     * @param serviceId (optional)
     * @param x_Api_Version (optional)
     */
    requestAccess(userId, projectId, serviceId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/RequestAccess?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (serviceId === null)
            throw new Error("The parameter 'serviceId' cannot be null.");
        else if (serviceId !== undefined)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRequestAccess(_response));
        });
    }
    processRequestAccess(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Approve a user request
     * @param reqId (optional)
     * @param status (optional)
     * @param x_Api_Version (optional)
     */
    approveRequest(reqId, status, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/ApproveRequest?";
        if (reqId === null)
            throw new Error("The parameter 'reqId' cannot be null.");
        else if (reqId !== undefined)
            url_ += "reqId=" + encodeURIComponent("" + reqId) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processApproveRequest(_response));
        });
    }
    processApproveRequest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectUserViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Link users to
     * @param userId (optional)
     * @param projectId (optional)
     * @param serviceId (optional)
     * @param groupId (optional)
     * @param otherUserIds (optional)
     * @param role (optional)
     * @param permission (optional)
     * @param x_Api_Version (optional)
     */
    linkUsers(userId, projectId, serviceId, groupId, otherUserIds, role, permission, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/LinkUsers?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (serviceId === null)
            throw new Error("The parameter 'serviceId' cannot be null.");
        else if (serviceId !== undefined)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        if (groupId === null)
            throw new Error("The parameter 'groupId' cannot be null.");
        else if (groupId !== undefined)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        if (otherUserIds !== undefined && otherUserIds !== null)
            otherUserIds && otherUserIds.forEach(item => { url_ += "otherUserIds=" + encodeURIComponent("" + item) + "&"; });
        if (role !== undefined && role !== null)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (permission !== undefined && permission !== null)
            url_ += "permission=" + encodeURIComponent("" + permission) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processLinkUsers(_response));
        });
    }
    processLinkUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Unlink users from a service
     * @param userId (optional)
     * @param projectId (optional)
     * @param serviceId (optional)
     * @param linkIds (optional)
     * @param x_Api_Version (optional)
     */
    unLinkUsers(userId, projectId, serviceId, linkIds, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/UnLinkUsers?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (serviceId === null)
            throw new Error("The parameter 'serviceId' cannot be null.");
        else if (serviceId !== undefined)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        if (linkIds !== undefined && linkIds !== null)
            linkIds && linkIds.forEach(item => { url_ += "LinkIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUnLinkUsers(_response));
        });
    }
    processUnLinkUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get users of a marketplace service
     * @param userId (optional)
     * @param projectId (optional)
     * @param serviceId (optional)
     * @param groupId (optional)
     * @param x_Api_Version (optional)
     */
    getUsers(userId, projectId, serviceId, groupId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/GetUsers?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (serviceId !== undefined && serviceId !== null)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        if (groupId !== undefined && groupId !== null)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetUsers(_response));
        });
    }
    processGetUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getProjectUsers(projectId, role, type, groupId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/GetProjectUsers?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (role !== undefined && role !== null)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (groupId !== undefined && groupId !== null)
            url_ += "groupId=" + encodeURIComponent("" + groupId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetProjectUsers(_response));
        });
    }
    processGetProjectUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get service rating
     * @param stpdid (optional)
     * @param x_Api_Version (optional)
     */
    getRatings(stpdid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/GetRatings?";
        if (stpdid === null)
            throw new Error("The parameter 'stpdid' cannot be null.");
        else if (stpdid !== undefined)
            url_ += "stpdid=" + encodeURIComponent("" + stpdid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRatings(_response));
        });
    }
    processGetRatings(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(RatingViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get service rating
     * @param stpdid (optional)
     * @param x_Api_Version (optional)
     */
    getRating(stpdid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/GetRating?";
        if (stpdid === null)
            throw new Error("The parameter 'stpdid' cannot be null.");
        else if (stpdid !== undefined)
            url_ += "stpdid=" + encodeURIComponent("" + stpdid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRating(_response));
        });
    }
    processGetRating(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Rate a service
     * @param stpdid (optional)
     * @param rating (optional)
     * @param comment (optional)
     * @param x_Api_Version (optional)
     */
    rate(stpdid, rating, comment, x_Api_Version) {
        let url_ = this.baseUrl + "/api/MarketPlace/Rate?";
        if (stpdid === null)
            throw new Error("The parameter 'stpdid' cannot be null.");
        else if (stpdid !== undefined)
            url_ += "stpdid=" + encodeURIComponent("" + stpdid) + "&";
        if (rating === null)
            throw new Error("The parameter 'rating' cannot be null.");
        else if (rating !== undefined)
            url_ += "rating=" + encodeURIComponent("" + rating) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRate(_response));
        });
    }
    processRate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RatingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Invite a user to a service
     * @param x_Api_Version (optional)
     */
    invite(x_Api_Version, invite) {
        let url_ = this.baseUrl + "/api/MarketPlace/Invite";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(invite);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processInvite(_response));
        });
    }
    processInvite(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class NotificationClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get the current user notification preferences
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getPreferences(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/GetPreferences?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPreferences(_response));
        });
    }
    processGetPreferences(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NotificationPreferences.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save the current user notification preferences
     * @param userId (optional)
     * @param x_Api_Version (optional)
     * @param preferences The preferences to save
     */
    savePreferences(userId, x_Api_Version, preferences) {
        let url_ = this.baseUrl + "/api/Notification/SavePreferences?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(preferences);
        let options_ = {
            body: content_,
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSavePreferences(_response));
        });
    }
    processSavePreferences(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NotificationPreferences.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get Notifications Count
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getUnreadCount(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/GetUnreadCount?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetUnreadCount(_response));
        });
    }
    processGetUnreadCount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get Notifications Count
     * @param userId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param includeAlreadyRead (optional)
     * @param to (optional)
     * @param subject (optional)
     * @param body (optional)
     * @param error (optional)
     * @param type (optional)
     * @param status (optional)
     * @param area (optional)
     * @param evnt (optional)
     * @param x_Api_Version (optional)
     */
    getCount(userId, fromDate, toDate, includeAlreadyRead, to, subject, body, error, type, status, area, evnt, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/GetCount?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (includeAlreadyRead === null)
            throw new Error("The parameter 'includeAlreadyRead' cannot be null.");
        else if (includeAlreadyRead !== undefined)
            url_ += "includeAlreadyRead=" + encodeURIComponent("" + includeAlreadyRead) + "&";
        if (to !== undefined && to !== null)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        if (subject !== undefined && subject !== null)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
        if (body !== undefined && body !== null)
            url_ += "body=" + encodeURIComponent("" + body) + "&";
        if (error !== undefined && error !== null)
            url_ += "error=" + encodeURIComponent("" + error) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (area !== undefined && area !== null)
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        if (evnt !== undefined && evnt !== null)
            url_ += "evnt=" + encodeURIComponent("" + evnt) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCount(_response));
        });
    }
    processGetCount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get Notifications
     * @param userId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param includeAlreadyRead (optional)
     * @param to (optional)
     * @param subject (optional)
     * @param body (optional)
     * @param error (optional)
     * @param type (optional)
     * @param status (optional)
     * @param area (optional)
     * @param evnt (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDirection (optional)
     * @param x_Api_Version (optional)
     */
    get(userId, fromDate, toDate, includeAlreadyRead, to, subject, body, error, type, status, area, evnt, pageNo, pageSize, sortField, sortDirection, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/Get?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (includeAlreadyRead === null)
            throw new Error("The parameter 'includeAlreadyRead' cannot be null.");
        else if (includeAlreadyRead !== undefined)
            url_ += "includeAlreadyRead=" + encodeURIComponent("" + includeAlreadyRead) + "&";
        if (to !== undefined && to !== null)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        if (subject !== undefined && subject !== null)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
        if (body !== undefined && body !== null)
            url_ += "body=" + encodeURIComponent("" + body) + "&";
        if (error !== undefined && error !== null)
            url_ += "error=" + encodeURIComponent("" + error) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (area !== undefined && area !== null)
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        if (evnt !== undefined && evnt !== null)
            url_ += "evnt=" + encodeURIComponent("" + evnt) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(NotificationViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get Attachment
     * @param userId (optional)
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getAttachment(userId, id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/GetAttachment?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAttachment(_response));
        });
    }
    processGetAttachment(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NotificationAttachmentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create Email Notifications for Support and Other
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, x_Api_Version, notification) {
        let url_ = this.baseUrl + "/api/Notification/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(notification);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NotificationViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    bulkFlagAsRead(userId, fromDate, toDate, includeAlreadyRead, to, subject, body, error, type, status, area, evnt, pageNo, pageSize, sortField, sortDirection, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/BulkFlagAsRead?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (includeAlreadyRead === null)
            throw new Error("The parameter 'includeAlreadyRead' cannot be null.");
        else if (includeAlreadyRead !== undefined)
            url_ += "includeAlreadyRead=" + encodeURIComponent("" + includeAlreadyRead) + "&";
        if (to !== undefined && to !== null)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
        if (subject !== undefined && subject !== null)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
        if (body !== undefined && body !== null)
            url_ += "body=" + encodeURIComponent("" + body) + "&";
        if (error !== undefined && error !== null)
            url_ += "error=" + encodeURIComponent("" + error) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (area !== undefined && area !== null)
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        if (evnt !== undefined && evnt !== null)
            url_ += "evnt=" + encodeURIComponent("" + evnt) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processBulkFlagAsRead(_response));
        });
    }
    processBulkFlagAsRead(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Flag Notification as read
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    flagAsRead(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/FlagAsRead?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processFlagAsRead(_response));
        });
    }
    processFlagAsRead(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Notification/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NotificationViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ParamDefClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get definition by Id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    get(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get parent service for a parameter def by Id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getParentService(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/GetParentService?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetParentService(_response));
        });
    }
    processGetParentService(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get hierarchy of fields for a service
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param includeCount (optional)
     * @param includeSettings (optional)
     * @param includeChildren (optional)
     * @param x_Api_Version (optional)
     */
    getHierachy(projectId, stpdId, includeCount, includeSettings, includeChildren, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/GetHierachy?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (includeCount === null)
            throw new Error("The parameter 'includeCount' cannot be null.");
        else if (includeCount !== undefined)
            url_ += "includeCount=" + encodeURIComponent("" + includeCount) + "&";
        if (includeSettings === null)
            throw new Error("The parameter 'includeSettings' cannot be null.");
        else if (includeSettings !== undefined)
            url_ += "includeSettings=" + encodeURIComponent("" + includeSettings) + "&";
        if (includeChildren === null)
            throw new Error("The parameter 'includeChildren' cannot be null.");
        else if (includeChildren !== undefined)
            url_ += "includeChildren=" + encodeURIComponent("" + includeChildren) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHierachy(_response));
        });
    }
    processGetHierachy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new parameter definition
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, paramdef) {
        let url_ = this.baseUrl + "/api/ParamDef/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(paramdef);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a definition
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, paramdef) {
        let url_ = this.baseUrl + "/api/ParamDef/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(paramdef);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a definition
     * @param paramdefid (optional)
     * @param x_Api_Version (optional)
     */
    delete(paramdefid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/Delete?";
        if (paramdefid === null)
            throw new Error("The parameter 'paramdefid' cannot be null.");
        else if (paramdefid !== undefined)
            url_ += "paramdefid=" + encodeURIComponent("" + paramdefid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete multiple definitions
     * @param paramdefids (optional)
     * @param x_Api_Version (optional)
     */
    deleteMulti(paramdefids, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/DeleteMulti?";
        if (paramdefids !== undefined && paramdefids !== null)
            paramdefids && paramdefids.forEach(item => { url_ += "paramdefids=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteMulti(_response));
        });
    }
    processDeleteMulti(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get setting for a definition by Id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getSetting(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/GetSetting?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSetting(_response));
        });
    }
    processGetSetting(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefSettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get last setting for a definition
     * @param pdId (optional)
     * @param type (optional)
     * @param x_Api_Version (optional)
     */
    getLastSetting(pdId, type, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/GetLastSetting?";
        if (pdId === null)
            throw new Error("The parameter 'pdId' cannot be null.");
        else if (pdId !== undefined)
            url_ += "pdId=" + encodeURIComponent("" + pdId) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetLastSetting(_response));
        });
    }
    processGetLastSetting(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefSettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get settings for a definition
     * @param pdId (optional)
     * @param type (optional)
     * @param x_Api_Version (optional)
     */
    getSettings(pdId, type, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/GetSettings?";
        if (pdId === null)
            throw new Error("The parameter 'pdId' cannot be null.");
        else if (pdId !== undefined)
            url_ += "pdId=" + encodeURIComponent("" + pdId) + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSettings(_response));
        });
    }
    processGetSettings(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefSettingViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save setting for a definition
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    saveSetting(userId, x_Api_Version, setting) {
        let url_ = this.baseUrl + "/api/ParamDef/SaveSetting?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(setting);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSaveSetting(_response));
        });
    }
    processSaveSetting(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefSettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new setting for a definition
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    createSetting(userId, x_Api_Version, setting) {
        let url_ = this.baseUrl + "/api/ParamDef/CreateSetting?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(setting);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateSetting(_response));
        });
    }
    processCreateSetting(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefSettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Elevate to parent level
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    elevate(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ParamDef/Elevate?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processElevate(_response));
        });
    }
    processElevate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ParametersClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get parameter value
     * @param docid (optional)
     * @param stpdId (optional)
     * @param category (optional)
     * @param grouping (optional)
     * @param includeverification (optional)
     * @param x_Api_Version (optional)
     */
    get(docid, stpdId, category, grouping, includeverification, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/Get?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (category !== undefined && category !== null)
            url_ += "category=" + encodeURIComponent("" + category) + "&";
        if (grouping !== undefined && grouping !== null)
            url_ += "grouping=" + encodeURIComponent("" + grouping) + "&";
        if (includeverification === null)
            throw new Error("The parameter 'includeverification' cannot be null.");
        else if (includeverification !== undefined)
            url_ += "includeverification=" + encodeURIComponent("" + includeverification) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get parameter hierarchy
     * @param docid (optional)
     * @param stpdId (optional)
     * @param includeverification (optional)
     * @param x_Api_Version (optional)
     */
    getHierarchy(docid, stpdId, includeverification, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/GetHierarchy?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (includeverification === null)
            throw new Error("The parameter 'includeverification' cannot be null.");
        else if (includeverification !== undefined)
            url_ += "includeverification=" + encodeURIComponent("" + includeverification) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHierarchy(_response));
        });
    }
    processGetHierarchy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new parameter on a document
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, param) {
        let url_ = this.baseUrl + "/api/Parameters/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(param);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentParameterViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a parameter
     * @param paramid (optional)
     * @param x_Api_Version (optional)
     */
    delete(paramid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/Delete?";
        if (paramid === null)
            throw new Error("The parameter 'paramid' cannot be null.");
        else if (paramid !== undefined)
            url_ += "paramid=" + encodeURIComponent("" + paramid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentParameterViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a parameter
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, param) {
        let url_ = this.baseUrl + "/api/Parameters/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(param);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentParameterViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update multiple parameter values
     * @param x_Api_Version (optional)
     */
    updateMulti(x_Api_Version, parameters) {
        let url_ = this.baseUrl + "/api/Parameters/UpdateMulti";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(parameters);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateMulti(_response));
        });
    }
    processUpdateMulti(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a parameter by verification id
     * @param verificationId (optional)
     * @param x_Api_Version (optional)
     */
    getByVerification(verificationId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/GetByVerification?";
        if (verificationId === null)
            throw new Error("The parameter 'verificationId' cannot be null.");
        else if (verificationId !== undefined)
            url_ += "verificationId=" + encodeURIComponent("" + verificationId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByVerification(_response));
        });
    }
    processGetByVerification(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DocumentParameterViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a summary of verifications
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    getSummary(projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/GetSummary?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSummary(_response));
        });
    }
    processGetSummary(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocParamSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Extract document parameters
     * @param docid (optional)
     * @param x_Api_Version (optional)
     */
    extract(docid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Parameters/Extract?";
        if (docid === null)
            throw new Error("The parameter 'docid' cannot be null.");
        else if (docid !== undefined)
            url_ += "docid=" + encodeURIComponent("" + docid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processExtract(_response));
        });
    }
    processExtract(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentExtraction.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class PaymentClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get paymetnhtml for credit card processing
     * @param uId (optional)
     * @param pId (optional)
     * @param bId (optional)
     * @param intent (optional)
     * @param x_Api_Version (optional)
     */
    getPaymentHtml(uId, pId, bId, intent, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Payment/GetPaymentHtml?";
        if (uId !== undefined && uId !== null)
            url_ += "uId=" + encodeURIComponent("" + uId) + "&";
        if (pId === null)
            throw new Error("The parameter 'pId' cannot be null.");
        else if (pId !== undefined)
            url_ += "pId=" + encodeURIComponent("" + pId) + "&";
        if (bId === null)
            throw new Error("The parameter 'bId' cannot be null.");
        else if (bId !== undefined)
            url_ += "bId=" + encodeURIComponent("" + bId) + "&";
        if (intent !== undefined && intent !== null)
            url_ += "intent=" + encodeURIComponent("" + intent) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPaymentHtml(_response));
        });
    }
    processGetPaymentHtml(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create an order
     * @param uId (optional)
     * @param pId (optional)
     * @param bId (optional)
     * @param intent (optional)
     * @param x_Api_Version (optional)
     */
    createOrder(uId, pId, bId, intent, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Payment/CreateOrder?";
        if (uId !== undefined && uId !== null)
            url_ += "uId=" + encodeURIComponent("" + uId) + "&";
        if (pId === null)
            throw new Error("The parameter 'pId' cannot be null.");
        else if (pId !== undefined)
            url_ += "pId=" + encodeURIComponent("" + pId) + "&";
        if (bId === null)
            throw new Error("The parameter 'bId' cannot be null.");
        else if (bId !== undefined)
            url_ += "bId=" + encodeURIComponent("" + bId) + "&";
        if (intent !== undefined && intent !== null)
            url_ += "intent=" + encodeURIComponent("" + intent) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateOrder(_response));
        });
    }
    processCreateOrder(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Process the order
     * @param action (optional)
     * @param x_Api_Version (optional)
     */
    orderProcess(action, x_Api_Version, order) {
        let url_ = this.baseUrl + "/api/Payment/OrderProcess?";
        if (action !== undefined && action !== null)
            url_ += "action=" + encodeURIComponent("" + action) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(order);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processOrderProcess(_response));
        });
    }
    processOrderProcess(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get info on an order
     * @param x_Api_Version (optional)
     */
    getOrder(x_Api_Version, orderId) {
        let url_ = this.baseUrl + "/api/Payment/GetOrder";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(orderId);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetOrder(_response));
        });
    }
    processGetOrder(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get payments made by a user
     * @param userId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param x_Api_Version (optional)
     */
    getPayments(userId, fromDate, toDate, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Payment/GetPayments?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPayments(_response));
        });
    }
    processGetPayments(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(PaymentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Process a payment and update status from payment provider
     * @param paymentId (optional)
     * @param x_Api_Version (optional)
     */
    processPayment(paymentId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Payment/ProcessPayment?";
        if (paymentId === null)
            throw new Error("The parameter 'paymentId' cannot be null.");
        else if (paymentId !== undefined)
            url_ += "paymentId=" + encodeURIComponent("" + paymentId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processProcessPayment(_response));
        });
    }
    processProcessPayment(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PaymentViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ProjectClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get projects and services linked to a user
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getByUser(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/GetByUser?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByUser(_response));
        });
    }
    processGetByUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a specific project
     * @param userId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    getUserProject(userId, projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/GetUserProject?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetUserProject(_response));
        });
    }
    processGetUserProject(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get hierarchy of fields for all services in a project
     * @param userId (optional)
     * @param projectId (optional)
     * @param includeCount (optional)
     * @param onlyServices (optional)
     * @param includeSettings (optional)
     * @param includeChildren (optional)
     * @param x_Api_Version (optional)
     */
    getHierachies(userId, projectId, includeCount, onlyServices, includeSettings, includeChildren, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/GetHierachies?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (includeCount === null)
            throw new Error("The parameter 'includeCount' cannot be null.");
        else if (includeCount !== undefined)
            url_ += "includeCount=" + encodeURIComponent("" + includeCount) + "&";
        if (onlyServices === null)
            throw new Error("The parameter 'onlyServices' cannot be null.");
        else if (onlyServices !== undefined)
            url_ += "onlyServices=" + encodeURIComponent("" + onlyServices) + "&";
        if (includeSettings === null)
            throw new Error("The parameter 'includeSettings' cannot be null.");
        else if (includeSettings !== undefined)
            url_ += "includeSettings=" + encodeURIComponent("" + includeSettings) + "&";
        if (includeChildren === null)
            throw new Error("The parameter 'includeChildren' cannot be null.");
        else if (includeChildren !== undefined)
            url_ += "includeChildren=" + encodeURIComponent("" + includeChildren) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHierachies(_response));
        });
    }
    processGetHierachies(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new project
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, project) {
        let url_ = this.baseUrl + "/api/Project/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(project);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a project
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    update(userId, x_Api_Version, project) {
        let url_ = this.baseUrl + "/api/Project/Update?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(project);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a project
     * @param userId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    delete(userId, projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/Delete?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find a project by name
     * @param userId (optional)
     * @param projectName (optional)
     * @param x_Api_Version (optional)
     */
    getByName(userId, projectName, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/GetByName?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByName(_response));
        });
    }
    processGetByName(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get services related to a project
     * @param userId (optional)
     * @param projectId (optional)
     * @param stlfilter (optional)
     * @param enginefilter (optional)
     * @param x_Api_Version (optional)
     */
    getServices(userId, projectId, stlfilter, enginefilter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/GetServices?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stlfilter !== undefined && stlfilter !== null)
            url_ += "stlfilter=" + encodeURIComponent("" + stlfilter) + "&";
        if (enginefilter !== undefined && enginefilter !== null)
            url_ += "enginefilter=" + encodeURIComponent("" + enginefilter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetServices(_response));
        });
    }
    processGetServices(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Change the owner of a project
     * @param userId (optional)
     * @param projectId (optional)
     * @param toUserId (optional)
     * @param x_Api_Version (optional)
     */
    changeOwner(userId, projectId, toUserId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/ChangeOwner?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processChangeOwner(_response));
        });
    }
    processChangeOwner(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a manual credit and link it to a project
     * @param userId (optional)
     * @param projectId (optional)
     * @param bundleId (optional)
     * @param x_Api_Version (optional)
     */
    createCredit(userId, projectId, bundleId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Project/CreateCredit?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (bundleId === null)
            throw new Error("The parameter 'bundleId' cannot be null.");
        else if (bundleId !== undefined)
            url_ += "bundleId=" + encodeURIComponent("" + bundleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateCredit(_response));
        });
    }
    processCreateCredit(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TransactionsAuditViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ReportsClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get groups
     * @param x_Api_Version (optional)
     */
    getGroups(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Reports/GetGroups";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetGroups(_response));
        });
    }
    processGetGroups(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Group.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get goup users
     * @param groupid (optional)
     * @param x_Api_Version (optional)
     */
    getGroupUsers(groupid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Reports/GetGroupUsers?";
        if (groupid === null)
            throw new Error("The parameter 'groupid' cannot be null.");
        else if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetGroupUsers(_response));
        });
    }
    processGetGroupUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(GroupUser.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get reports
     * @param groupid (optional)
     * @param x_Api_Version (optional)
     */
    getReports(groupid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Reports/GetReports?";
        if (groupid === null)
            throw new Error("The parameter 'groupid' cannot be null.");
        else if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetReports(_response));
        });
    }
    processGetReports(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Report.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get report by Id
     * @param groupid (optional)
     * @param reportid (optional)
     * @param x_Api_Version (optional)
     */
    getReport(groupid, reportid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Reports/GetReport?";
        if (groupid === null)
            throw new Error("The parameter 'groupid' cannot be null.");
        else if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        if (reportid === null)
            throw new Error("The parameter 'reportid' cannot be null.");
        else if (reportid !== undefined)
            url_ += "reportid=" + encodeURIComponent("" + reportid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetReport(_response));
        });
    }
    processGetReport(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Report.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get pages by report id
     * @param groupid (optional)
     * @param reportid (optional)
     * @param x_Api_Version (optional)
     */
    getPages(groupid, reportid, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Reports/GetPages?";
        if (groupid === null)
            throw new Error("The parameter 'groupid' cannot be null.");
        else if (groupid !== undefined)
            url_ += "groupid=" + encodeURIComponent("" + groupid) + "&";
        if (reportid === null)
            throw new Error("The parameter 'reportid' cannot be null.");
        else if (reportid !== undefined)
            url_ += "reportid=" + encodeURIComponent("" + reportid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPages(_response));
        });
    }
    processGetPages(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Page.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class RolesClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get role info by Id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    get(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/Get?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RoleViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get role info by name
     * @param name (optional)
     * @param x_Api_Version (optional)
     */
    getByName(name, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/GetByName?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByName(_response));
        });
    }
    processGetByName(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RoleViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all roles
     * @param x_Api_Version (optional)
     */
    getAll(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/GetAll";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(RoleViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get roles by pages
     * @param page (optional)
     * @param pageSize (optional)
     * @param x_Api_Version (optional)
     */
    getPaged(page, pageSize, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/GetPaged?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPaged(_response));
        });
    }
    processGetPaged(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(RoleViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a role
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    update(id, x_Api_Version, role) {
        let url_ = this.baseUrl + "/api/Roles/Update?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(role);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a role
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, role) {
        let url_ = this.baseUrl + "/api/Roles/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(role);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RoleViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a role
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/Delete?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RoleViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get permissions claims on the system
     * @param x_Api_Version (optional)
     */
    getAllPermissions(x_Api_Version) {
        let url_ = this.baseUrl + "/api/Roles/permissions";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAllPermissions(_response));
        });
    }
    processGetAllPermissions(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(PermissionViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ServicesClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get a service by ID
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    get(stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Get?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new service
     * @param userId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, projectId, x_Api_Version, stpd) {
        let url_ = this.baseUrl + "/api/Services/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(stpd);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Initialize a service
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param classId (optional)
     * @param x_Api_Version (optional)
     */
    initialize(userId, projectId, stpdId, classId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Initialize?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (classId !== undefined && classId !== null)
            url_ += "classId=" + encodeURIComponent("" + classId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PATCH",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processInitialize(_response));
        });
    }
    processInitialize(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ParameterDefViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Change a service
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param newstdpId (optional)
     * @param x_Api_Version (optional)
     */
    change(userId, projectId, stpdId, newstdpId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Change?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (newstdpId === null)
            throw new Error("The parameter 'newstdpId' cannot be null.");
        else if (newstdpId !== undefined)
            url_ += "newstdpId=" + encodeURIComponent("" + newstdpId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processChange(_response));
        });
    }
    processChange(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Move a service to another project
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param toProjectId (optional)
     * @param x_Api_Version (optional)
     */
    move(userId, projectId, stpdId, toProjectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Move?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (toProjectId === null)
            throw new Error("The parameter 'toProjectId' cannot be null.");
        else if (toProjectId !== undefined)
            url_ += "toProjectId=" + encodeURIComponent("" + toProjectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processMove(_response));
        });
    }
    processMove(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Clone a service CloneHierarchy result / settings
     * @param userId (optional)
     * @param projectId (optional)
     * @param pdIdSrc (optional)
     * @param pdIdDst (optional)
     * @param categories (optional)
     * @param x_Api_Version (optional)
     */
    cloneHierarchy(userId, projectId, pdIdSrc, pdIdDst, categories, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/CloneHierarchy?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (pdIdSrc === null)
            throw new Error("The parameter 'pdIdSrc' cannot be null.");
        else if (pdIdSrc !== undefined)
            url_ += "pdIdSrc=" + encodeURIComponent("" + pdIdSrc) + "&";
        if (pdIdDst === null)
            throw new Error("The parameter 'pdIdDst' cannot be null.");
        else if (pdIdDst !== undefined)
            url_ += "pdIdDst=" + encodeURIComponent("" + pdIdDst) + "&";
        if (categories !== undefined && categories !== null)
            categories && categories.forEach(item => { url_ += "categories=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCloneHierarchy(_response));
        });
    }
    processCloneHierarchy(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Clone a service to new project
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param toProjectId (optional)
     * @param x_Api_Version (optional)
     */
    clone(userId, projectId, stpdId, toProjectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Clone?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (toProjectId === null)
            throw new Error("The parameter 'toProjectId' cannot be null.");
        else if (toProjectId !== undefined)
            url_ += "toProjectId=" + encodeURIComponent("" + toProjectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processClone(_response));
        });
    }
    processClone(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Build definition keys after training
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    createDefinitionResults(userId, projectId, stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/CreateDefinitionResults?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateDefinitionResults(_response));
        });
    }
    processCreateDefinitionResults(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceEventViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Train service
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param forceRetraining (optional)
     * @param x_Api_Version (optional)
     */
    train(userId, projectId, stpdId, forceRetraining, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Train?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (forceRetraining === null)
            throw new Error("The parameter 'forceRetraining' cannot be null.");
        else if (forceRetraining !== undefined)
            url_ += "forceRetraining=" + encodeURIComponent("" + forceRetraining) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processTrain(_response));
        });
    }
    processTrain(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceEventViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save custom training
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param docId (optional)
     * @param x_Api_Version (optional)
     */
    saveCustomTraining(userId, projectId, stpdId, docId, x_Api_Version, parameters) {
        let url_ = this.baseUrl + "/api/Services/SaveCustomTraining?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(parameters);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSaveCustomTraining(_response));
        });
    }
    processSaveCustomTraining(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get custom training parameters
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param docId (optional)
     * @param x_Api_Version (optional)
     */
    getCustomTraining(userId, projectId, stpdId, docId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetCustomTraining?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCustomTraining(_response));
        });
    }
    processGetCustomTraining(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get custom training fields
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param classId (optional)
     * @param x_Api_Version (optional)
     */
    getCustomTrainingFields(userId, projectId, stpdId, classId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetCustomTrainingFields?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (classId !== undefined && classId !== null)
            url_ += "classId=" + encodeURIComponent("" + classId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCustomTrainingFields(_response));
        });
    }
    processGetCustomTrainingFields(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete custom training parameters
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param docId (optional)
     * @param parId (optional)
     * @param x_Api_Version (optional)
     */
    deleteCustomTraining(userId, projectId, stpdId, docId, parId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/DeleteCustomTraining?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (parId !== undefined && parId !== null)
            url_ += "parId=" + encodeURIComponent("" + parId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteCustomTraining(_response));
        });
    }
    processDeleteCustomTraining(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentParameterViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Process service documents
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param documentIds (optional)
     * @param force (optional)
     * @param deleteChildDocs (optional)
     * @param deleteChildDocsRecursive (optional)
     * @param deletePreviousOutputDocs (optional)
     * @param resetResults (optional)
     * @param resetComments (optional)
     * @param resumeIdentifier (optional)
     * @param x_Api_Version (optional)
     */
    process(userId, projectId, stpdId, documentIds, force, deleteChildDocs, deleteChildDocsRecursive, deletePreviousOutputDocs, resetResults, resetComments, resumeIdentifier, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/Process?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (documentIds !== undefined && documentIds !== null)
            documentIds && documentIds.forEach(item => { url_ += "documentIds=" + encodeURIComponent("" + item) + "&"; });
        if (force === null)
            throw new Error("The parameter 'force' cannot be null.");
        else if (force !== undefined)
            url_ += "force=" + encodeURIComponent("" + force) + "&";
        if (deleteChildDocs === null)
            throw new Error("The parameter 'deleteChildDocs' cannot be null.");
        else if (deleteChildDocs !== undefined)
            url_ += "deleteChildDocs=" + encodeURIComponent("" + deleteChildDocs) + "&";
        if (deleteChildDocsRecursive === null)
            throw new Error("The parameter 'deleteChildDocsRecursive' cannot be null.");
        else if (deleteChildDocsRecursive !== undefined)
            url_ += "deleteChildDocsRecursive=" + encodeURIComponent("" + deleteChildDocsRecursive) + "&";
        if (deletePreviousOutputDocs === null)
            throw new Error("The parameter 'deletePreviousOutputDocs' cannot be null.");
        else if (deletePreviousOutputDocs !== undefined)
            url_ += "deletePreviousOutputDocs=" + encodeURIComponent("" + deletePreviousOutputDocs) + "&";
        if (resetResults === null)
            throw new Error("The parameter 'resetResults' cannot be null.");
        else if (resetResults !== undefined)
            url_ += "resetResults=" + encodeURIComponent("" + resetResults) + "&";
        if (resetComments === null)
            throw new Error("The parameter 'resetComments' cannot be null.");
        else if (resetComments !== undefined)
            url_ += "resetComments=" + encodeURIComponent("" + resetComments) + "&";
        if (resumeIdentifier !== undefined && resumeIdentifier !== null)
            url_ += "resumeIdentifier=" + encodeURIComponent("" + resumeIdentifier) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processProcess(_response));
        });
    }
    processProcess(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get related users
     * @param userId (optional)
     * @param includeBalances (optional)
     * @param projectId (optional)
     * @param serviceId (optional)
     * @param x_Api_Version (optional)
     */
    getRelatedUsers(userId, includeBalances, projectId, serviceId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetRelatedUsers?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (includeBalances === null)
            throw new Error("The parameter 'includeBalances' cannot be null.");
        else if (includeBalances !== undefined)
            url_ += "includeBalances=" + encodeURIComponent("" + includeBalances) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (serviceId !== undefined && serviceId !== null)
            url_ += "serviceId=" + encodeURIComponent("" + serviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRelatedUsers(_response));
        });
    }
    processGetRelatedUsers(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all service types.  You can use a serice interface filter
     * @param puId (optional)
     * @param x_Api_Version (optional)
     */
    getConstraints(puId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetConstraints?";
        if (puId === null)
            throw new Error("The parameter 'puId' cannot be null.");
        else if (puId !== undefined)
            url_ += "puId=" + encodeURIComponent("" + puId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetConstraints(_response));
        });
    }
    processGetConstraints(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProjectUserConstraintViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    createConstraints(x_Api_Version, constraint) {
        let url_ = this.baseUrl + "/api/Services/CreateConstraint";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(constraint);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateConstraints(_response));
        });
    }
    processCreateConstraints(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectUserConstraintViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update service type charge.
     * @param x_Api_Version (optional)
     */
    updateConstraints(x_Api_Version, constraint) {
        let url_ = this.baseUrl + "/api/Services/UpdateConstraint";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(constraint);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateConstraints(_response));
        });
    }
    processUpdateConstraints(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectUserConstraintViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete service type charge.
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteConstraints(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/DeleteConstraint?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteConstraints(_response));
        });
    }
    processDeleteConstraints(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProjectUserConstraintViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get service balances
     * @param userId (optional)
     * @param stl (optional)
     * @param stpdId (optional)
     * @param projectId (optional)
     * @param allRelated (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param x_Api_Version (optional)
     */
    getBalances(userId, stl, stpdId, projectId, allRelated, fromDate, toDate, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetBalances?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (stl !== undefined && stl !== null)
            url_ += "stl=" + encodeURIComponent("" + stl) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (allRelated !== undefined && allRelated !== null)
            url_ += "allRelated=" + encodeURIComponent("" + allRelated) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetBalances(_response));
        });
    }
    processGetBalances(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(AccountBalanceItem.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get the balance for a service
     * @param userId (optional)
     * @param stl (optional)
     * @param stpdId (optional)
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    getBalance(userId, stl, stpdId, projectId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetBalance?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (stl !== undefined && stl !== null)
            url_ += "stl=" + encodeURIComponent("" + stl) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetBalance(_response));
        });
    }
    processGetBalance(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get audit transaction for service usage
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param interval (optional)
     * @param x_Api_Version (optional)
     */
    getAudit(userId, projectId, stpdId, fromDate, toDate, interval, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetAudit?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (interval !== undefined && interval !== null)
            url_ += "interval=" + encodeURIComponent("" + interval) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAudit(_response));
        });
    }
    processGetAudit(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(TransactionsAuditViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get events for a service
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param x_Api_Version (optional)
     */
    getEvents(userId, projectId, stpdId, fromDate, toDate, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetEvents?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetEvents(_response));
        });
    }
    processGetEvents(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceEventViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all service types.  You can use a serice interface filter
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    getCharges(stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/GetCharges?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCharges(_response));
        });
    }
    processGetCharges(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceChargeViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    createCharge(x_Api_Version, charge) {
        let url_ = this.baseUrl + "/api/Services/CreateCharge";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(charge);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateCharge(_response));
        });
    }
    processCreateCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update service type charge.
     * @param x_Api_Version (optional)
     */
    updateCharge(x_Api_Version, charge) {
        let url_ = this.baseUrl + "/api/Services/UpdateCharge";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(charge);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateCharge(_response));
        });
    }
    processUpdateCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete service type charge.
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteCharge(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/DeleteCharge?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteCharge(_response));
        });
    }
    processDeleteCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Find References to a Service
     * @param stpdId (optional)
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    findServiceReferences(stpdId, id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Services/FindServiceReferences?";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processFindServiceReferences(_response));
        });
    }
    processFindServiceReferences(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ParameterDefViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class ServiceTypeClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get all service types.  You can use a serice interface filter
     * @param enginefilter (optional)
     * @param x_Api_Version (optional)
     */
    getAll(enginefilter, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ServiceType/GetAll?";
        if (enginefilter !== undefined && enginefilter !== null)
            url_ += "enginefilter=" + encodeURIComponent("" + enginefilter) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceTypeViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new service type
     * @param x_Api_Version (optional)
     */
    create(x_Api_Version, service) {
        let url_ = this.baseUrl + "/api/ServiceType/Create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(service);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a service type
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, service) {
        let url_ = this.baseUrl + "/api/ServiceType/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(service);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a service type
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ServiceType/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all service types and charges.
     * @param x_Api_Version (optional)
     */
    getAllCharges(x_Api_Version) {
        let url_ = this.baseUrl + "/api/ServiceType/GetAllCharges";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAllCharges(_response));
        });
    }
    processGetAllCharges(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceTypeChargeViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get all service types.  You can use a serice interface filter
     * @param serviceTypeId (optional)
     * @param x_Api_Version (optional)
     */
    getCharges(serviceTypeId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ServiceType/GetCharges?";
        if (serviceTypeId === null)
            throw new Error("The parameter 'serviceTypeId' cannot be null.");
        else if (serviceTypeId !== undefined)
            url_ += "serviceTypeId=" + encodeURIComponent("" + serviceTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCharges(_response));
        });
    }
    processGetCharges(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ServiceTypeChargeViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    createCharge(x_Api_Version, charge) {
        let url_ = this.baseUrl + "/api/ServiceType/CreateCharge";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(charge);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateCharge(_response));
        });
    }
    processCreateCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update service type charge.
     * @param x_Api_Version (optional)
     */
    updateCharge(x_Api_Version, charge) {
        let url_ = this.baseUrl + "/api/ServiceType/UpdateCharge";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(charge);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateCharge(_response));
        });
    }
    processUpdateCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete service type charge.
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteCharge(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/ServiceType/DeleteCharge?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteCharge(_response));
        });
    }
    processDeleteCharge(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ServiceTypeChargeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class SystemClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get the current service Data and Time
     * @param x_Api_Version (optional)
     */
    getSystemDate(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetSystemDate";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSystemDate(_response));
        });
    }
    processGetSystemDate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? new Date(resultData200.toString()) : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get system and application information
     * @param x_Api_Version (optional)
     */
    getSystemInfo(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetSystemInfo";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSystemInfo(_response));
        });
    }
    processGetSystemInfo(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200) {
                    result200 = {};
                    for (let key in resultData200) {
                        if (resultData200.hasOwnProperty(key))
                            result200[key] = resultData200[key];
                    }
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get data types
     * @param x_Api_Version (optional)
     */
    getDataTypes(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetDataTypes";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetDataTypes(_response));
        });
    }
    processGetDataTypes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DataTypeViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get value types
     * @param vt (optional)
     * @param vtname (optional)
     * @param x_Api_Version (optional)
     */
    getDataTypeInfo(vt, vtname, x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetDataTypeInfo?";
        if (vt === null)
            throw new Error("The parameter 'vt' cannot be null.");
        else if (vt !== undefined)
            url_ += "vt=" + encodeURIComponent("" + vt) + "&";
        if (vtname !== undefined && vtname !== null)
            url_ += "vtname=" + encodeURIComponent("" + vtname) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetDataTypeInfo(_response));
        });
    }
    processGetDataTypeInfo(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DataTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a new data type
     * @param x_Api_Version (optional)
     */
    createDataType(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/System/CreateDataType";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateDataType(_response));
        });
    }
    processCreateDataType(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DataTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a datatype
     * @param x_Api_Version (optional)
     */
    updateDataType(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/System/UpdateDataType";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateDataType(_response));
        });
    }
    processUpdateDataType(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DataTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a datatype
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteDataType(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/DeleteDataType?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteDataType(_response));
        });
    }
    processDeleteDataType(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DataTypeViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get system enum values
     * @param x_Api_Version (optional)
     */
    getEnumData(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetEnumData";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetEnumData(_response));
        });
    }
    processGetEnumData(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(EnumDataViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * create a new system enum
     * @param x_Api_Version (optional)
     */
    createEnumData(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/System/CreateEnumData";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateEnumData(_response));
        });
    }
    processCreateEnumData(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = EnumDataViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update system enum
     * @param x_Api_Version (optional)
     */
    updateEnumData(x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/System/UpdateEnumData";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdateEnumData(_response));
        });
    }
    processUpdateEnumData(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = EnumDataViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a system enum
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    deleteEnumData(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/DeleteEnumData?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDeleteEnumData(_response));
        });
    }
    processDeleteEnumData(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = EnumDataViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    getEnumOptions(name, x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetEnumOptions?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetEnumOptions(_response));
        });
    }
    processGetEnumOptions(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(item);
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * API to expose background worker items
     * @param x_Api_Version (optional)
     */
    getBackgroundWorkerItem(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetBackgroundWorkerItem";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetBackgroundWorkerItem(_response));
        });
    }
    processGetBackgroundWorkerItem(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BackgoundWorkItem.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Dummy to expose event logs
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getLogs(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/GetLogs?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetLogs(_response));
        });
    }
    processGetLogs(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(LogEvent.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Dummy to expose event logs
     * @param x_Api_Version (optional)
     */
    checkServices(x_Api_Version) {
        let url_ = this.baseUrl + "/api/System/CheckServices";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCheckServices(_response));
        });
    }
    processCheckServices(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class UserGroupClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get by id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    get(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserGroup/Get?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserGroupViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get by users
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getByUser(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserGroup/GetByUser?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetByUser(_response));
        });
    }
    processGetByUser(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(UserGroupViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create usergroup
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, x_Api_Version, group) {
        let url_ = this.baseUrl + "/api/UserGroup/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(group);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserGroupViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update group
     * @param x_Api_Version (optional)
     */
    update(x_Api_Version, group) {
        let url_ = this.baseUrl + "/api/UserGroup/Update";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(group);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserGroupViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserGroup/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserGroupViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class UserPreferencesClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get the current user preferences
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    get(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserPreferences/Get?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save current user preferences
     * @param userId (optional)
     * @param x_Api_Version (optional)
     * @param data In JSon format
     */
    save(userId, x_Api_Version, data) {
        let url_ = this.baseUrl + "/api/UserPreferences/Save?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(data);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSave(_response));
        });
    }
    processSave(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class UserSettingsClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get user setting by name
     * @param userId (optional)
     * @param name (optional)
     * @param key (optional)
     * @param x_Api_Version (optional)
     */
    get(userId, name, key, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserSettings/Get?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (key !== undefined && key !== null)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get user settings
     * @param userId (optional)
     * @param key (optional)
     * @param onlyKeyValues (optional)
     * @param x_Api_Version (optional)
     */
    getAll(userId, key, onlyKeyValues, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserSettings/GetAll?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (key !== undefined && key !== null)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (onlyKeyValues === null)
            throw new Error("The parameter 'onlyKeyValues' cannot be null.");
        else if (onlyKeyValues !== undefined)
            url_ += "onlyKeyValues=" + encodeURIComponent("" + onlyKeyValues) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SettingViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save a user settings
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    create(userId, x_Api_Version, setting) {
        let url_ = this.baseUrl + "/api/UserSettings/Create?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(setting);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update a user settings
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    update(userId, x_Api_Version, setting) {
        let url_ = this.baseUrl + "/api/UserSettings/Update?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(setting);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processUpdate(_response));
        });
    }
    processUpdate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete a user settings
     * @param userId (optional)
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(userId, id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserSettings/Delete?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SettingViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get user profile picture
     * @param userId (optional)
     * @param x_Api_Version (optional)
     */
    getPicture(userId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/UserSettings/GetPicture?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetPicture(_response));
        });
    }
    processGetPicture(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get user profile picture
     * @param userId (optional)
     * @param x_Api_Version (optional)
     * @param file (optional)
     */
    setPicture(userId, x_Api_Version, file) {
        let url_ = this.baseUrl + "/api/UserSettings/SetPicture?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSetPicture(_response));
        });
    }
    processSetPicture(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class VerificationClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get a verification by id
     * @param verificationId (optional)
     * @param x_Api_Version (optional)
     */
    get(verificationId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/Get?";
        if (verificationId === null)
            throw new Error("The parameter 'verificationId' cannot be null.");
        else if (verificationId !== undefined)
            url_ += "verificationId=" + encodeURIComponent("" + verificationId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = VerificationViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get verifications on a parameter
     * @param docId (optional)
     * @param parameterId (optional)
     * @param x_Api_Version (optional)
     */
    getAll(docId, parameterId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetAll?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (parameterId === null)
            throw new Error("The parameter 'parameterId' cannot be null.");
        else if (parameterId !== undefined)
            url_ += "parameterId=" + encodeURIComponent("" + parameterId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get latest verification on a parameter
     * @param docId (optional)
     * @param parameterId (optional)
     * @param pdId (optional)
     * @param x_Api_Version (optional)
     */
    getLatest(docId, parameterId, pdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetLatest?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (parameterId !== undefined && parameterId !== null)
            url_ += "parameterId=" + encodeURIComponent("" + parameterId) + "&";
        if (pdId !== undefined && pdId !== null)
            url_ += "pdId=" + encodeURIComponent("" + pdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetLatest(_response));
        });
    }
    processGetLatest(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = VerificationViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Rerun verification on a parameter
     * @param docId (optional)
     * @param parameterId (optional)
     * @param restart (optional)
     * @param x_Api_Version (optional)
     */
    rerun(docId, parameterId, restart, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/Rerun?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (parameterId === null)
            throw new Error("The parameter 'parameterId' cannot be null.");
        else if (parameterId !== undefined)
            url_ += "parameterId=" + encodeURIComponent("" + parameterId) + "&";
        if (restart === null)
            throw new Error("The parameter 'restart' cannot be null.");
        else if (restart !== undefined)
            url_ += "restart=" + encodeURIComponent("" + restart) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRerun(_response));
        });
    }
    processRerun(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Rerun verification on a document
     * @param docId (optional)
     * @param restart (optional)
     * @param x_Api_Version (optional)
     */
    rerunAll(docId, restart, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/RerunAll?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (restart === null)
            throw new Error("The parameter 'restart' cannot be null.");
        else if (restart !== undefined)
            url_ += "restart=" + encodeURIComponent("" + restart) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRerunAll(_response));
        });
    }
    processRerunAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create a list of verifications
     * @param docId (optional)
     * @param x_Api_Version (optional)
     */
    verify(docId, x_Api_Version, verifications) {
        let url_ = this.baseUrl + "/api/Verification/Verify?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(verifications);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processVerify(_response));
        });
    }
    processVerify(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a verification image shred
     * @param userId (optional)
     * @param docId (optional)
     * @param parId (optional)
     * @param verificationId (optional)
     * @param inline (optional)
     * @param x_Api_Version (optional)
     */
    getShred(userId, docId, parId, verificationId, inline, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetShred?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (parId === null)
            throw new Error("The parameter 'parId' cannot be null.");
        else if (parId !== undefined)
            url_ += "parId=" + encodeURIComponent("" + parId) + "&";
        if (verificationId === null)
            throw new Error("The parameter 'verificationId' cannot be null.");
        else if (verificationId !== undefined)
            url_ += "verificationId=" + encodeURIComponent("" + verificationId) + "&";
        if (inline === null)
            throw new Error("The parameter 'inline' cannot be null.");
        else if (inline !== undefined)
            url_ += "inline=" + encodeURIComponent("" + inline) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetShred(_response));
        });
    }
    processGetShred(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get a summary of verifications
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param pdId (optional)
     * @param latestOnly (optional)
     * @param x_Api_Version (optional)
     */
    getSummary(projectId, stpdId, pdId, latestOnly, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetSummary?";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (pdId === null)
            throw new Error("The parameter 'pdId' cannot be null.");
        else if (pdId !== undefined)
            url_ += "pdId=" + encodeURIComponent("" + pdId) + "&";
        if (latestOnly !== undefined && latestOnly !== null)
            url_ += "latestOnly=" + encodeURIComponent("" + latestOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSummary(_response));
        });
    }
    processGetSummary(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get verification analytics
     * @param projectId (optional)
     * @param stpdID (optional)
     * @param latestOnly (optional)
     * @param x_Api_Version (optional)
     */
    getHeatmap(projectId, stpdID, latestOnly, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetHeatmap?";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdID === null)
            throw new Error("The parameter 'stpdID' cannot be null.");
        else if (stpdID !== undefined)
            url_ += "stpdID=" + encodeURIComponent("" + stpdID) + "&";
        if (latestOnly !== undefined && latestOnly !== null)
            url_ += "latestOnly=" + encodeURIComponent("" + latestOnly) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHeatmap(_response));
        });
    }
    processGetHeatmap(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get extended verification info
     * @param userId (optional)
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param classname (optional)
     * @param filename (optional)
     * @param filetype (optional)
     * @param start (optional)
     * @param end (optional)
     * @param masterid (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDirection (optional)
     * @param comment (optional)
     * @param result (optional)
     * @param x_Api_Version (optional)
     */
    getExtended(userId, projectId, stpdId, usage, statuses, classname, filename, filetype, start, end, masterid, pageNo, pageSize, sortField, sortDirection, comment, result, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Verification/GetExtended?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage !== undefined && usage !== null)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (classname !== undefined && classname !== null)
            url_ += "classname=" + encodeURIComponent("" + classname) + "&";
        if (filename !== undefined && filename !== null)
            url_ += "filename=" + encodeURIComponent("" + filename) + "&";
        if (filetype !== undefined && filetype !== null)
            url_ += "filetype=" + encodeURIComponent("" + filetype) + "&";
        if (start !== undefined && start !== null)
            url_ += "start=" + encodeURIComponent(start ? "" + start.toISOString() : "") + "&";
        if (end !== undefined && end !== null)
            url_ += "end=" + encodeURIComponent(end ? "" + end.toISOString() : "") + "&";
        if (masterid !== undefined && masterid !== null)
            url_ += "masterid=" + encodeURIComponent("" + masterid) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (result !== undefined && result !== null)
            url_ += "result=" + encodeURIComponent("" + result) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetExtended(_response));
        });
    }
    processGetExtended(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(VerificationSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class WizardClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get all wizards steps for a project and services
     * @param projectId (optional)
     * @param stpdId (optional)
     * @param x_Api_Version (optional)
     */
    getAll(projectId, stpdId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/Wizard/GetAll?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (stpdId === null)
            throw new Error("The parameter 'stpdId' cannot be null.");
        else if (stpdId !== undefined)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetAll(_response));
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Wizard.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Bootstrap a new serice and get the wizard steps required
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    createService(projectId, x_Api_Version, stpd) {
        let url_ = this.baseUrl + "/api/Wizard/CreateService?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(stpd);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreateService(_response));
        });
    }
    processCreateService(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Wizard.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Validate a visard step
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    validate(projectId, x_Api_Version, wizard) {
        let url_ = this.baseUrl + "/api/Wizard/Validate?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(wizard);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processValidate(_response));
        });
    }
    processValidate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Wizard.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Validate miltiple wizard steps
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    validateMulti(projectId, x_Api_Version, wizards) {
        let url_ = this.baseUrl + "/api/Wizard/ValidateMulti?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(wizards);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processValidateMulti(_response));
        });
    }
    processValidateMulti(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(Wizard.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Save a wizard step
     * @param projectId (optional)
     * @param x_Api_Version (optional)
     */
    save(projectId, x_Api_Version, wizard) {
        let url_ = this.baseUrl + "/api/Wizard/Save?";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(wizard);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSave(_response));
        });
    }
    processSave(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = Wizard.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class WorkItemClient extends AIForgedBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }
    /**
     * Get document work queue
     * @param userId (optional)
     * @param stpdId (optional)
     * @param usage (optional)
     * @param statuses (optional)
     * @param x_Api_Version (optional)
     */
    getWorkQueue(userId, stpdId, usage, statuses, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/GetWorkQueue?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (stpdId !== undefined && stpdId !== null)
            url_ += "stpdId=" + encodeURIComponent("" + stpdId) + "&";
        if (usage !== undefined && usage !== null)
            url_ += "usage=" + encodeURIComponent("" + usage) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetWorkQueue(_response));
        });
    }
    processGetWorkQueue(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DocumentsSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get WorkItems Count
     * @param userId (optional)
     * @param projectId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param type (optional)
     * @param action (optional)
     * @param status (optional)
     * @param docId (optional)
     * @param shredId (optional)
     * @param comment (optional)
     * @param x_Api_Version (optional)
     */
    getCount(userId, projectId, fromDate, toDate, type, action, status, docId, shredId, comment, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/GetCount?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (action !== undefined && action !== null)
            url_ += "action=" + encodeURIComponent("" + action) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (docId !== undefined && docId !== null)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (shredId !== undefined && shredId !== null)
            url_ += "shredId=" + encodeURIComponent("" + shredId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCount(_response));
        });
    }
    processGetCount(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get WorkItems
     * @param userId (optional)
     * @param projectId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param type (optional)
     * @param action (optional)
     * @param status (optional)
     * @param docId (optional)
     * @param shredId (optional)
     * @param comment (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDirection (optional)
     * @param x_Api_Version (optional)
     */
    get(userId, projectId, fromDate, toDate, type, action, status, docId, shredId, comment, pageNo, pageSize, sortField, sortDirection, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Get?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (action !== undefined && action !== null)
            url_ += "action=" + encodeURIComponent("" + action) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (docId !== undefined && docId !== null)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (shredId !== undefined && shredId !== null)
            url_ += "shredId=" + encodeURIComponent("" + shredId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Expire WorkItems
     * @param userId (optional)
     * @param projectId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param type (optional)
     * @param action (optional)
     * @param status (optional)
     * @param docId (optional)
     * @param shredId (optional)
     * @param comment (optional)
     * @param pageNo (optional)
     * @param pageSize (optional)
     * @param sortField (optional)
     * @param sortDirection (optional)
     * @param x_Api_Version (optional)
     */
    expire(userId, projectId, fromDate, toDate, type, action, status, docId, shredId, comment, pageNo, pageSize, sortField, sortDirection, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Expire?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId !== undefined && projectId !== null)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (action !== undefined && action !== null)
            url_ += "action=" + encodeURIComponent("" + action) + "&";
        if (status !== undefined && status !== null)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (docId !== undefined && docId !== null)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (shredId !== undefined && shredId !== null)
            url_ += "shredId=" + encodeURIComponent("" + shredId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (pageNo !== undefined && pageNo !== null)
            url_ += "pageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortField !== undefined && sortField !== null)
            url_ += "sortField=" + encodeURIComponent("" + sortField) + "&";
        if (sortDirection !== undefined && sortDirection !== null)
            url_ += "sortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processExpire(_response));
        });
    }
    processExpire(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get WorkItem By Id
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    getById(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetById(_response));
        });
    }
    processGetById(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = WorkItemViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Escelate to another user
     * @param id (optional)
     * @param method (optional)
     * @param comment (optional)
     * @param toUserId (optional)
     * @param graceperiod (optional)
     * @param x_Api_Version (optional)
     */
    escelate(id, method, comment, toUserId, graceperiod, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Escelate?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (method === null)
            throw new Error("The parameter 'method' cannot be null.");
        else if (method !== undefined)
            url_ += "method=" + encodeURIComponent("" + method) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        if (graceperiod !== undefined && graceperiod !== null)
            url_ += "graceperiod=" + encodeURIComponent("" + graceperiod) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processEscelate(_response));
        });
    }
    processEscelate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Escelate to another user
     * @param id (optional)
     * @param toUserId (optional)
     * @param comment (optional)
     * @param x_Api_Version (optional)
     */
    transfer(id, toUserId, comment, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Transfer?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processTransfer(_response));
        });
    }
    processTransfer(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = WorkItemViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Reject work item
     * @param id (optional)
     * @param method (optional)
     * @param toUserId (optional)
     * @param comment (optional)
     * @param graceperiod (optional)
     * @param x_Api_Version (optional)
     */
    reject(id, method, toUserId, comment, graceperiod, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Reject?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (method !== undefined && method !== null)
            url_ += "method=" + encodeURIComponent("" + method) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (graceperiod !== undefined && graceperiod !== null)
            url_ += "graceperiod=" + encodeURIComponent("" + graceperiod) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processReject(_response));
        });
    }
    processReject(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Reject work items for a shred
     * @param docId (optional)
     * @param shredId (optional)
     * @param method (optional)
     * @param toUserId (optional)
     * @param comment (optional)
     * @param graceperiod (optional)
     * @param x_Api_Version (optional)
     */
    rejectShred(docId, shredId, method, toUserId, comment, graceperiod, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/RejectShred?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (shredId === null)
            throw new Error("The parameter 'shredId' cannot be null.");
        else if (shredId !== undefined)
            url_ += "shredId=" + encodeURIComponent("" + shredId) + "&";
        if (method !== undefined && method !== null)
            url_ += "method=" + encodeURIComponent("" + method) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        if (comment !== undefined && comment !== null)
            url_ += "comment=" + encodeURIComponent("" + comment) + "&";
        if (graceperiod !== undefined && graceperiod !== null)
            url_ += "graceperiod=" + encodeURIComponent("" + graceperiod) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRejectShred(_response));
        });
    }
    processRejectShred(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update status
     * @param id (optional)
     * @param status (optional)
     * @param x_Api_Version (optional)
     */
    setStatus(id, status, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/SetStatus?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "PUT",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processSetStatus(_response));
        });
    }
    processSetStatus(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Delete work item
     * @param id (optional)
     * @param x_Api_Version (optional)
     */
    delete(id, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processDelete(_response));
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = WorkItemViewModel.fromJS(resultData200);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Create Workflow for Document Shred
     * @param docId (optional)
     * @param shredId (optional)
     * @param method (optional)
     * @param graceperiod (optional)
     * @param x_Api_Version (optional)
     */
    create(docId, shredId, method, graceperiod, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Create?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (shredId === null)
            throw new Error("The parameter 'shredId' cannot be null.");
        else if (shredId !== undefined)
            url_ += "shredId=" + encodeURIComponent("" + shredId) + "&";
        if (method === null)
            throw new Error("The parameter 'method' cannot be null.");
        else if (method !== undefined)
            url_ += "method=" + encodeURIComponent("" + method) + "&";
        if (graceperiod !== undefined && graceperiod !== null)
            url_ += "graceperiod=" + encodeURIComponent("" + graceperiod) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Finalize Workflow for Document
     * @param docId (optional)
     * @param x_Api_Version (optional)
     */
    finalize(docId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Finalize?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processFinalize(_response));
        });
    }
    processFinalize(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Take Ownership of ourstanding Workflow items for Document
     * @param docId (optional)
     * @param toUserId (optional)
     * @param x_Api_Version (optional)
     */
    ownership(docId, toUserId, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Ownership?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (toUserId !== undefined && toUserId !== null)
            url_ += "toUserId=" + encodeURIComponent("" + toUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processOwnership(_response));
        });
    }
    processOwnership(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Update status
     * @param docId (optional)
     * @param method (optional)
     * @param graceperiod (optional)
     * @param x_Api_Version (optional)
     */
    rebuild(docId, method, graceperiod, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/Rebuild?";
        if (docId === null)
            throw new Error("The parameter 'docId' cannot be null.");
        else if (docId !== undefined)
            url_ += "docId=" + encodeURIComponent("" + docId) + "&";
        if (method !== undefined && method !== null)
            url_ += "method=" + encodeURIComponent("" + method) + "&";
        if (graceperiod !== undefined && graceperiod !== null)
            url_ += "graceperiod=" + encodeURIComponent("" + graceperiod) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRebuild(_response));
        });
    }
    processRebuild(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkItemViewModel.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get WorkItems Summary
     * @param userId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param x_Api_Version (optional)
     */
    getSummary(userId, fromDate, toDate, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/GetSummary?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetSummary(_response));
        });
    }
    processGetSummary(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkFlowSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Get WorkItems Heatmap
     * @param userId (optional)
     * @param projectId (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param x_Api_Version (optional)
     */
    getHeatmap(userId, projectId, fromDate, toDate, x_Api_Version) {
        let url_ = this.baseUrl + "/api/WorkItem/GetHeatmap?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (projectId === null)
            throw new Error("The parameter 'projectId' cannot be null.");
        else if (projectId !== undefined)
            url_ += "projectId=" + encodeURIComponent("" + projectId) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "fromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "toDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "X-Api-Version": x_Api_Version !== undefined && x_Api_Version !== null ? "" + x_Api_Version : "",
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetHeatmap(_response));
        });
    }
    processGetHeatmap(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(WorkFlowSummary.fromJS(item));
                }
                else {
                    result200 = null;
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
export class UserViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.jobTitle = _data["jobTitle"];
            this.phoneNumber = _data["phoneNumber"];
            this.configuration = _data["configuration"];
            this.isEnabled = _data["isEnabled"];
            this.isLockedOut = _data["isLockedOut"];
            this.friendlyName = _data["friendlyName"];
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.updatedDate = _data["updatedDate"] ? new Date(_data["updatedDate"].toString()) : undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [];
                for (let item of _data["roles"])
                    this.roles.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["jobTitle"] = this.jobTitle;
        data["phoneNumber"] = this.phoneNumber;
        data["configuration"] = this.configuration;
        data["isEnabled"] = this.isEnabled;
        data["isLockedOut"] = this.isLockedOut;
        data["friendlyName"] = this.friendlyName;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}
export class UserEditViewModel extends UserViewModel {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
            this.confirmPassword = _data["confirmPassword"];
            this.captchaToken = _data["captchaToken"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserEditViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        data["confirmPassword"] = this.confirmPassword;
        data["captchaToken"] = this.captchaToken;
        super.toJSON(data);
        return data;
    }
}
export class OperationBase {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.path = _data["path"];
            this.op = _data["op"];
            this.from = _data["from"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OperationBase();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["path"] = this.path;
        data["op"] = this.op;
        data["from"] = this.from;
        return data;
    }
}
export class Operation extends OperationBase {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}
export class UserActivateViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userName = _data["userName"];
            this.token = _data["token"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserActivateViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["token"] = this.token;
        return data;
    }
}
export class UserPasswordResetViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.userName = _data["userName"];
            this.token = _data["token"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserPasswordResetViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["token"] = this.token;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}
export class UserLoginInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.loginProvider = _data["loginProvider"];
            this.providerKey = _data["providerKey"];
            this.providerDisplayName = _data["providerDisplayName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["providerDisplayName"] = this.providerDisplayName;
        return data;
    }
}
export class BundlesViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.count = _data["count"];
            this.price = _data["price"];
            this.discount = _data["discount"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.isActive = _data["isActive"];
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : undefined;
            this.productCode = _data["productCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BundlesViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["description"] = this.description;
        data["count"] = this.count;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["isActive"] = this.isActive;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : undefined;
        data["productCode"] = this.productCode;
        return data;
    }
}
export var BundleType;
(function (BundleType) {
    BundleType[BundleType["PrePaid"] = 1] = "PrePaid";
    BundleType[BundleType["PostPaid"] = 2] = "PostPaid";
    BundleType[BundleType["Gift"] = 3] = "Gift";
    BundleType[BundleType["Signon"] = 4] = "Signon";
    BundleType[BundleType["Marketplace"] = 5] = "Marketplace";
})(BundleType || (BundleType = {}));
export class ClassesViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.projectId = _data["projectId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.comment = _data["comment"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.type = _data["type"];
            this.related = _data["related"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ClassesViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["projectId"] = this.projectId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["comment"] = this.comment;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["type"] = this.type;
        data["related"] = this.related;
        return data;
    }
}
export var ClassType;
(function (ClassType) {
    ClassType[ClassType["System"] = 0] = "System";
    ClassType[ClassType["Definition"] = 1] = "Definition";
    ClassType[ClassType["Other"] = 2] = "Other";
})(ClassType || (ClassType = {}));
export class ContactViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.status = _data["status"];
            this.type = _data["type"];
            this.address = _data["address"];
            this.name = _data["name"];
            this.comment = _data["comment"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ContactViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["status"] = this.status;
        data["type"] = this.type;
        data["address"] = this.address;
        data["name"] = this.name;
        data["comment"] = this.comment;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    }
}
export var ContactStatus;
(function (ContactStatus) {
    ContactStatus[ContactStatus["None"] = 0] = "None";
    ContactStatus[ContactStatus["Active"] = 1] = "Active";
    ContactStatus[ContactStatus["Disabled"] = 2] = "Disabled";
    ContactStatus[ContactStatus["Deleted"] = 90] = "Deleted";
})(ContactStatus || (ContactStatus = {}));
export var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["None"] = 0] = "None";
    NotificationType[NotificationType["Email"] = 1] = "Email";
    NotificationType[NotificationType["SMS"] = 2] = "SMS";
    NotificationType[NotificationType["WhatsApp"] = 3] = "WhatsApp";
    NotificationType[NotificationType["Bot"] = 4] = "Bot";
    NotificationType[NotificationType["Application"] = 5] = "Application";
})(NotificationType || (NotificationType = {}));
export class CustomDataSet {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.projectId = _data["projectId"];
            this.stpdId = _data["stpdId"];
            this.docId = _data["docId"];
            this.keyDefId = _data["keyDefId"];
            this.keyDef = _data["keyDef"] ? ParameterDefViewModel.fromJS(_data["keyDef"]) : undefined;
            this.document = _data["document"] ? DocumentViewModel.fromJS(_data["document"]) : undefined;
            if (Array.isArray(_data["definitions"])) {
                this.definitions = [];
                for (let item of _data["definitions"])
                    this.definitions.push(ParameterDefViewModel.fromJS(item));
            }
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (let item of _data["data"])
                    this.data.push(CustomDataSetRecord.fromJS(item));
            }
            this.status = _data["status"];
            this.info = _data["info"];
            this.includeData = _data["includeData"];
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.sortFieldDefId = _data["sortFieldDefId"];
            this.sortDirection = _data["sortDirection"];
            this.includeVerifications = _data["includeVerifications"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CustomDataSet();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["stpdId"] = this.stpdId;
        data["docId"] = this.docId;
        data["keyDefId"] = this.keyDefId;
        data["keyDef"] = this.keyDef ? this.keyDef.toJSON() : undefined;
        data["document"] = this.document ? this.document.toJSON() : undefined;
        if (Array.isArray(this.definitions)) {
            data["definitions"] = [];
            for (let item of this.definitions)
                data["definitions"].push(item.toJSON());
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["info"] = this.info;
        data["includeData"] = this.includeData;
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["sortFieldDefId"] = this.sortFieldDefId;
        data["sortDirection"] = this.sortDirection;
        data["includeVerifications"] = this.includeVerifications;
        return data;
    }
}
export class ParameterDefViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.projectId = _data["projectId"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.serviceId = _data["serviceId"];
            this.classId = _data["classId"];
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.label = _data["label"];
            this.tags = _data["tags"];
            this.description = _data["description"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.status = _data["status"];
            this.category = _data["category"];
            this.grouping = _data["grouping"];
            this.valueType = _data["valueType"];
            this.valueTypeName = _data["valueTypeName"];
            this.defaultValue = _data["defaultValue"];
            this.required = _data["required"];
            this.index = _data["index"];
            this.info = _data["info"];
            this.reference = _data["reference"];
            this.rating = _data["rating"];
            this.availability = _data["availability"];
            if (Array.isArray(_data["children"])) {
                this.children = [];
                for (let item of _data["children"])
                    this.children.push(ParameterDefViewModel.fromJS(item));
            }
            if (Array.isArray(_data["settings"])) {
                this.settings = [];
                for (let item of _data["settings"])
                    this.settings.push(ParameterDefSettingViewModel.fromJS(item));
            }
            this.totalCharge = _data["totalCharge"];
            this.userCount = _data["userCount"];
            this.parameterCount = _data["parameterCount"];
            this.documentCount = _data["documentCount"];
            this.validation = _data["validation"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterDefViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectId"] = this.projectId;
        data["serviceTypeId"] = this.serviceTypeId;
        data["serviceId"] = this.serviceId;
        data["classId"] = this.classId;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["label"] = this.label;
        data["tags"] = this.tags;
        data["description"] = this.description;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["status"] = this.status;
        data["category"] = this.category;
        data["grouping"] = this.grouping;
        data["valueType"] = this.valueType;
        data["valueTypeName"] = this.valueTypeName;
        data["defaultValue"] = this.defaultValue;
        data["required"] = this.required;
        data["index"] = this.index;
        data["info"] = this.info;
        data["reference"] = this.reference;
        data["rating"] = this.rating;
        data["availability"] = this.availability;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["totalCharge"] = this.totalCharge;
        data["userCount"] = this.userCount;
        data["parameterCount"] = this.parameterCount;
        data["documentCount"] = this.documentCount;
        data["validation"] = this.validation;
        return data;
    }
}
export var ParameterDefinitionStatus;
(function (ParameterDefinitionStatus) {
    ParameterDefinitionStatus[ParameterDefinitionStatus["Default"] = 0] = "Default";
    ParameterDefinitionStatus[ParameterDefinitionStatus["Deleted"] = 99] = "Deleted";
})(ParameterDefinitionStatus || (ParameterDefinitionStatus = {}));
export var ParameterDefinitionCategory;
(function (ParameterDefinitionCategory) {
    ParameterDefinitionCategory[ParameterDefinitionCategory["None"] = 0] = "None";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Setting"] = 1] = "Setting";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Service"] = 2] = "Service";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Statistics"] = 3] = "Statistics";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Results"] = 4] = "Results";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Dependency"] = 5] = "Dependency";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Verification"] = 6] = "Verification";
    ParameterDefinitionCategory[ParameterDefinitionCategory["DataSet"] = 7] = "DataSet";
    ParameterDefinitionCategory[ParameterDefinitionCategory["PreProcessor"] = 20] = "PreProcessor";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Processor"] = 21] = "Processor";
    ParameterDefinitionCategory[ParameterDefinitionCategory["PostProcessor"] = 22] = "PostProcessor";
    ParameterDefinitionCategory[ParameterDefinitionCategory["Extraction"] = 40] = "Extraction";
})(ParameterDefinitionCategory || (ParameterDefinitionCategory = {}));
export var GroupingType;
(function (GroupingType) {
    GroupingType[GroupingType["None"] = 0] = "None";
    GroupingType[GroupingType["Page"] = 1] = "Page";
    GroupingType[GroupingType["Cluster"] = 2] = "Cluster";
    GroupingType[GroupingType["Table"] = 3] = "Table";
    GroupingType[GroupingType["Row"] = 4] = "Row";
    GroupingType[GroupingType["Column"] = 5] = "Column";
    GroupingType[GroupingType["Paragraph"] = 7] = "Paragraph";
    GroupingType[GroupingType["Line"] = 8] = "Line";
    GroupingType[GroupingType["Word"] = 9] = "Word";
    GroupingType[GroupingType["Array"] = 10] = "Array";
    GroupingType[GroupingType["Form"] = 11] = "Form";
    GroupingType[GroupingType["Field"] = 12] = "Field";
    GroupingType[GroupingType["Anchor"] = 13] = "Anchor";
    GroupingType[GroupingType["Unknown"] = 99] = "Unknown";
})(GroupingType || (GroupingType = {}));
export var ValueType;
(function (ValueType) {
    ValueType[ValueType["None"] = 0] = "None";
    ValueType[ValueType["String"] = 1] = "String";
    ValueType[ValueType["Number"] = 2] = "Number";
    ValueType[ValueType["Currency"] = 3] = "Currency";
    ValueType[ValueType["Boolean"] = 4] = "Boolean";
    ValueType[ValueType["DateTime"] = 5] = "DateTime";
    ValueType[ValueType["TimeSpan"] = 6] = "TimeSpan";
    ValueType[ValueType["Email"] = 7] = "Email";
    ValueType[ValueType["Enum"] = 8] = "Enum";
    ValueType[ValueType["Picture"] = 9] = "Picture";
    ValueType[ValueType["Password"] = 10] = "Password";
    ValueType[ValueType["SecureString"] = 11] = "SecureString";
    ValueType[ValueType["Address"] = 12] = "Address";
    ValueType[ValueType["IDNo"] = 13] = "IDNo";
    ValueType[ValueType["Country"] = 14] = "Country";
    ValueType[ValueType["Code"] = 15] = "Code";
    ValueType[ValueType["TelephoneNo"] = 17] = "TelephoneNo";
    ValueType[ValueType["GPS"] = 18] = "GPS";
    ValueType[ValueType["ServiceType"] = 19] = "ServiceType";
    ValueType[ValueType["Service"] = 20] = "Service";
    ValueType[ValueType["Data"] = 90] = "Data";
    ValueType[ValueType["DataSet"] = 91] = "DataSet";
    ValueType[ValueType["System"] = 98] = "System";
    ValueType[ValueType["Unknown"] = 99] = "Unknown";
})(ValueType || (ValueType = {}));
export var RequiredOption;
(function (RequiredOption) {
    RequiredOption[RequiredOption["Required"] = 1] = "Required";
    RequiredOption[RequiredOption["Optional"] = 2] = "Optional";
    RequiredOption[RequiredOption["UseDefault"] = 4] = "UseDefault";
    RequiredOption[RequiredOption["UseBestFit"] = 8] = "UseBestFit";
    RequiredOption[RequiredOption["Hidden"] = 16] = "Hidden";
    RequiredOption[RequiredOption["Utility"] = 32] = "Utility";
    RequiredOption[RequiredOption["VerificationService"] = 64] = "VerificationService";
    RequiredOption[RequiredOption["Trained"] = 128] = "Trained";
    RequiredOption[RequiredOption["Conditional"] = 256] = "Conditional";
})(RequiredOption || (RequiredOption = {}));
export var Availability;
(function (Availability) {
    Availability[Availability["None"] = 0] = "None";
    Availability[Availability["Private"] = 1] = "Private";
    Availability[Availability["Public"] = 2] = "Public";
    Availability[Availability["Marketplace"] = 3] = "Marketplace";
    Availability[Availability["Inherit"] = 4] = "Inherit";
    Availability[Availability["Internal"] = 5] = "Internal";
    Availability[Availability["Training"] = 6] = "Training";
    Availability[Availability["DataSet"] = 7] = "DataSet";
    Availability[Availability["Hidden"] = 9] = "Hidden";
    Availability[Availability["Deleted"] = 99] = "Deleted";
})(Availability || (Availability = {}));
export class ParameterDefSettingViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.parameterDefId = _data["parameterDefId"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.comment = _data["comment"];
            this.info = _data["info"];
            this.data = _data["data"];
            this.minValue = _data["minValue"];
            this.maxValue = _data["maxValue"];
            this.confidence = _data["confidence"];
            this.minConfidence = _data["minConfidence"];
            this.maxConfidence = _data["maxConfidence"];
            this.isCaseSensative = _data["isCaseSensative"];
            this.invert = _data["invert"];
            this.oneLine = _data["oneLine"];
            this.oneWord = _data["oneWord"];
            this.isHandwriting = _data["isHandwriting"];
            this.orientation = _data["orientation"];
            this.marking = _data["marking"];
            this.cells = _data["cells"];
            this.clearBefore = _data["clearBefore"];
            this.clearAfter = _data["clearAfter"];
            this.cleanupValuesBefore = _data["cleanupValuesBefore"];
            this.cleanupValuesAfter = _data["cleanupValuesAfter"];
            this.validateValuesBefore = _data["validateValuesBefore"];
            this.validateValuesAfter = _data["validateValuesAfter"];
            this.abortOnValidationError = _data["abortOnValidationError"];
            this.isReplacementCaseSensative = _data["isReplacementCaseSensative"];
            this.compileResults = _data["compileResults"];
            this.maxRetry = _data["maxRetry"];
            this.timeout = _data["timeout"];
            this.userId = _data["userId"];
            this.parameterDef = _data["parameterDef"] ? ParameterDefViewModel.fromJS(_data["parameterDef"]) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterDefSettingViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parameterDefId"] = this.parameterDefId;
        data["type"] = this.type;
        data["status"] = this.status;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["comment"] = this.comment;
        data["info"] = this.info;
        data["data"] = this.data;
        data["minValue"] = this.minValue;
        data["maxValue"] = this.maxValue;
        data["confidence"] = this.confidence;
        data["minConfidence"] = this.minConfidence;
        data["maxConfidence"] = this.maxConfidence;
        data["isCaseSensative"] = this.isCaseSensative;
        data["invert"] = this.invert;
        data["oneLine"] = this.oneLine;
        data["oneWord"] = this.oneWord;
        data["isHandwriting"] = this.isHandwriting;
        data["orientation"] = this.orientation;
        data["marking"] = this.marking;
        data["cells"] = this.cells;
        data["clearBefore"] = this.clearBefore;
        data["clearAfter"] = this.clearAfter;
        data["cleanupValuesBefore"] = this.cleanupValuesBefore;
        data["cleanupValuesAfter"] = this.cleanupValuesAfter;
        data["validateValuesBefore"] = this.validateValuesBefore;
        data["validateValuesAfter"] = this.validateValuesAfter;
        data["abortOnValidationError"] = this.abortOnValidationError;
        data["isReplacementCaseSensative"] = this.isReplacementCaseSensative;
        data["compileResults"] = this.compileResults;
        data["maxRetry"] = this.maxRetry;
        data["timeout"] = this.timeout;
        data["userId"] = this.userId;
        data["parameterDef"] = this.parameterDef ? this.parameterDef.toJSON() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        return data;
    }
}
export var SettingType;
(function (SettingType) {
    SettingType[SettingType["None"] = 0] = "None";
    SettingType[SettingType["Setting"] = 1] = "Setting";
    SettingType[SettingType["Rule"] = 2] = "Rule";
    SettingType[SettingType["Dependency"] = 3] = "Dependency";
    SettingType[SettingType["Template"] = 9] = "Template";
    SettingType[SettingType["Runtime"] = 10] = "Runtime";
})(SettingType || (SettingType = {}));
export var SettingStatus;
(function (SettingStatus) {
    SettingStatus[SettingStatus["Active"] = 0] = "Active";
    SettingStatus[SettingStatus["Disabled"] = 1] = "Disabled";
    SettingStatus[SettingStatus["Deleted"] = 99] = "Deleted";
})(SettingStatus || (SettingStatus = {}));
export var Orientation;
(function (Orientation) {
    Orientation[Orientation["None"] = 0] = "None";
    Orientation[Orientation["Horizontal"] = 1] = "Horizontal";
    Orientation[Orientation["Vertical"] = 2] = "Vertical";
    Orientation[Orientation["VerticalReverse"] = 3] = "VerticalReverse";
})(Orientation || (Orientation = {}));
export var MarkingType;
(function (MarkingType) {
    MarkingType[MarkingType["None"] = 0] = "None";
    MarkingType[MarkingType["Simple"] = 1] = "Simple";
    MarkingType[MarkingType["Undelined"] = 2] = "Undelined";
    MarkingType[MarkingType["SimpleComb"] = 3] = "SimpleComb";
    MarkingType[MarkingType["TextInFrame"] = 4] = "TextInFrame";
    MarkingType[MarkingType["CombInFrame"] = 5] = "CombInFrame";
    MarkingType[MarkingType["PartitionedFrame"] = 6] = "PartitionedFrame";
    MarkingType[MarkingType["CharBox"] = 7] = "CharBox";
    MarkingType[MarkingType["GreyBox"] = 8] = "GreyBox";
})(MarkingType || (MarkingType = {}));
export var OptionStatusFlags;
(function (OptionStatusFlags) {
    OptionStatusFlags[OptionStatusFlags["Required"] = 1] = "Required";
    OptionStatusFlags[OptionStatusFlags["Suspicious"] = 2] = "Suspicious";
    OptionStatusFlags[OptionStatusFlags["DefaultUsed"] = 4] = "DefaultUsed";
    OptionStatusFlags[OptionStatusFlags["Verified"] = 8] = "Verified";
    OptionStatusFlags[OptionStatusFlags["Bypassed"] = 16] = "Bypassed";
    OptionStatusFlags[OptionStatusFlags["Error"] = 32] = "Error";
    OptionStatusFlags[OptionStatusFlags["Done"] = 64] = "Done";
    OptionStatusFlags[OptionStatusFlags["Success"] = 128] = "Success";
    OptionStatusFlags[OptionStatusFlags["RangeProblem"] = 256] = "RangeProblem";
    OptionStatusFlags[OptionStatusFlags["IsValid"] = 512] = "IsValid";
    OptionStatusFlags[OptionStatusFlags["Warnings"] = 1024] = "Warnings";
})(OptionStatusFlags || (OptionStatusFlags = {}));
export class DocumentViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.projectId = _data["projectId"];
            this.serviceId = _data["serviceId"];
            this.status = _data["status"];
            this.usage = _data["usage"];
            this.classId = _data["classId"];
            this.contentType = _data["contentType"];
            this.filename = _data["filename"];
            this.fileType = _data["fileType"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.documentId = _data["documentId"];
            this.externalId = _data["externalId"];
            this.masterId = _data["masterId"];
            this.result = _data["result"];
            this.resultId = _data["resultId"];
            this.resultIndex = _data["resultIndex"];
            this.comment = _data["comment"];
            this.availability = _data["availability"];
            if (Array.isArray(_data["resultParameters"])) {
                this.resultParameters = [];
                for (let item of _data["resultParameters"])
                    this.resultParameters.push(DocumentParameterViewModel.fromJS(item));
            }
            if (Array.isArray(_data["data"])) {
                this.data = [];
                for (let item of _data["data"])
                    this.data.push(DocumentDataViewModel.fromJS(item));
            }
            if (Array.isArray(_data["documents"])) {
                this.documents = [];
                for (let item of _data["documents"])
                    this.documents.push(DocumentViewModel.fromJS(item));
            }
            this.originId = _data["originId"];
            this.canVerify = _data["canVerify"];
            this.canClassify = _data["canClassify"];
            this.canTrain = _data["canTrain"];
            this.trained = _data["trained"];
            this.linkedDocsCount = _data["linkedDocsCount"];
            this.trainingFieldCount = _data["trainingFieldCount"];
            this.trainedParametersCount = _data["trainedParametersCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["projectId"] = this.projectId;
        data["serviceId"] = this.serviceId;
        data["status"] = this.status;
        data["usage"] = this.usage;
        data["classId"] = this.classId;
        data["contentType"] = this.contentType;
        data["filename"] = this.filename;
        data["fileType"] = this.fileType;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["documentId"] = this.documentId;
        data["externalId"] = this.externalId;
        data["masterId"] = this.masterId;
        data["result"] = this.result;
        data["resultId"] = this.resultId;
        data["resultIndex"] = this.resultIndex;
        data["comment"] = this.comment;
        data["availability"] = this.availability;
        if (Array.isArray(this.resultParameters)) {
            data["resultParameters"] = [];
            for (let item of this.resultParameters)
                data["resultParameters"].push(item.toJSON());
        }
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["originId"] = this.originId;
        data["canVerify"] = this.canVerify;
        data["canClassify"] = this.canClassify;
        data["canTrain"] = this.canTrain;
        data["trained"] = this.trained;
        data["linkedDocsCount"] = this.linkedDocsCount;
        data["trainingFieldCount"] = this.trainingFieldCount;
        data["trainedParametersCount"] = this.trainedParametersCount;
        return data;
    }
}
export var DocumentStatus;
(function (DocumentStatus) {
    DocumentStatus[DocumentStatus["None"] = 0] = "None";
    DocumentStatus[DocumentStatus["Received"] = 3] = "Received";
    DocumentStatus[DocumentStatus["Analyzed"] = 4] = "Analyzed";
    DocumentStatus[DocumentStatus["Trained"] = 5] = "Trained";
    DocumentStatus[DocumentStatus["Processing"] = 8] = "Processing";
    DocumentStatus[DocumentStatus["Verification"] = 9] = "Verification";
    DocumentStatus[DocumentStatus["Processed"] = 10] = "Processed";
    DocumentStatus[DocumentStatus["InsufficientBalance"] = 81] = "InsufficientBalance";
    DocumentStatus[DocumentStatus["Error"] = 90] = "Error";
    DocumentStatus[DocumentStatus["Handled"] = 91] = "Handled";
    DocumentStatus[DocumentStatus["Deleted"] = 99] = "Deleted";
    DocumentStatus[DocumentStatus["CustomReceived"] = 103] = "CustomReceived";
    DocumentStatus[DocumentStatus["CustomBusy"] = 108] = "CustomBusy";
    DocumentStatus[DocumentStatus["CustomVerification"] = 109] = "CustomVerification";
    DocumentStatus[DocumentStatus["CustomProcessed"] = 110] = "CustomProcessed";
    DocumentStatus[DocumentStatus["CustomError"] = 190] = "CustomError";
})(DocumentStatus || (DocumentStatus = {}));
/** Why do we store this document */
export var UsageType;
(function (UsageType) {
    UsageType[UsageType["Definition"] = 0] = "Definition";
    UsageType[UsageType["Training"] = 1] = "Training";
    UsageType[UsageType["Inbox"] = 2] = "Inbox";
    UsageType[UsageType["Outbox"] = 3] = "Outbox";
    UsageType[UsageType["Label"] = 4] = "Label";
    UsageType[UsageType["DataSet"] = 10] = "DataSet";
    UsageType[UsageType["System"] = 90] = "System";
    UsageType[UsageType["Sample"] = 98] = "Sample";
    UsageType[UsageType["Preview"] = 99] = "Preview";
})(UsageType || (UsageType = {}));
export class DocumentParameterViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.documentId = _data["documentId"];
            this.paramDefId = _data["paramDefId"];
            this.parentId = _data["parentId"];
            this.sourceId = _data["sourceId"];
            this.value = _data["value"];
            this.data = _data["data"];
            this.index = _data["index"];
            this.colIndex = _data["colIndex"];
            this.colSpan = _data["colSpan"];
            this.rowIndex = _data["rowIndex"];
            this.rowSpan = _data["rowSpan"];
            this.availability = _data["availability"];
            this.paramDef = _data["paramDef"] ? ParameterDefViewModel.fromJS(_data["paramDef"]) : undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [];
                for (let item of _data["children"])
                    this.children.push(DocumentParameterViewModel.fromJS(item));
            }
            if (Array.isArray(_data["verifications"])) {
                this.verifications = [];
                for (let item of _data["verifications"])
                    this.verifications.push(VerificationViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentParameterViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["documentId"] = this.documentId;
        data["paramDefId"] = this.paramDefId;
        data["parentId"] = this.parentId;
        data["sourceId"] = this.sourceId;
        data["value"] = this.value;
        data["data"] = this.data;
        data["index"] = this.index;
        data["colIndex"] = this.colIndex;
        data["colSpan"] = this.colSpan;
        data["rowIndex"] = this.rowIndex;
        data["rowSpan"] = this.rowSpan;
        data["availability"] = this.availability;
        data["paramDef"] = this.paramDef ? this.paramDef.toJSON() : undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.verifications)) {
            data["verifications"] = [];
            for (let item of this.verifications)
                data["verifications"].push(item.toJSON());
        }
        return data;
    }
}
export class VerificationViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.parameterId = _data["parameterId"];
            this.userId = _data["userId"];
            this.value = _data["value"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.confidence = _data["confidence"];
            this.symbolsConfidence = _data["symbolsConfidence"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.result = _data["result"];
            this.box = _data["box"];
            this.info = _data["info"];
            this.data = _data["data"];
            this.userName = _data["userName"];
            this.serviceId = _data["serviceId"];
            this.serviceDocId = _data["serviceDocId"];
            this.provider = _data["provider"];
            this.settingId = _data["settingId"];
            this.workItem = _data["workItem"];
            this.transactionId = _data["transactionId"];
            this.charge = _data["charge"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VerificationViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parameterId"] = this.parameterId;
        data["userId"] = this.userId;
        data["value"] = this.value;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["confidence"] = this.confidence;
        data["symbolsConfidence"] = this.symbolsConfidence;
        data["type"] = this.type;
        data["status"] = this.status;
        data["result"] = this.result;
        data["box"] = this.box;
        data["info"] = this.info;
        data["data"] = this.data;
        data["userName"] = this.userName;
        data["serviceId"] = this.serviceId;
        data["serviceDocId"] = this.serviceDocId;
        data["provider"] = this.provider;
        data["settingId"] = this.settingId;
        data["workItem"] = this.workItem;
        data["transactionId"] = this.transactionId;
        data["charge"] = this.charge;
        return data;
    }
}
export var VerificationType;
(function (VerificationType) {
    VerificationType[VerificationType["None"] = 0] = "None";
    VerificationType[VerificationType["Provider"] = 1] = "Provider";
    VerificationType[VerificationType["System"] = 2] = "System";
    VerificationType[VerificationType["User"] = 3] = "User";
    VerificationType[VerificationType["Service"] = 4] = "Service";
    VerificationType[VerificationType["Training"] = 5] = "Training";
    VerificationType[VerificationType["RPA"] = 6] = "RPA";
    VerificationType[VerificationType["API"] = 7] = "API";
    VerificationType[VerificationType["DataSet"] = 8] = "DataSet";
})(VerificationType || (VerificationType = {}));
export var VerificationStatus;
(function (VerificationStatus) {
    VerificationStatus[VerificationStatus["Required"] = 1] = "Required";
    VerificationStatus[VerificationStatus["Suspicious"] = 2] = "Suspicious";
    VerificationStatus[VerificationStatus["DefaultUsed"] = 4] = "DefaultUsed";
    VerificationStatus[VerificationStatus["Verified"] = 8] = "Verified";
    VerificationStatus[VerificationStatus["Bypassed"] = 16] = "Bypassed";
    VerificationStatus[VerificationStatus["Error"] = 32] = "Error";
    VerificationStatus[VerificationStatus["Done"] = 64] = "Done";
    VerificationStatus[VerificationStatus["Success"] = 128] = "Success";
    VerificationStatus[VerificationStatus["RangeProblem"] = 256] = "RangeProblem";
    VerificationStatus[VerificationStatus["IsValid"] = 512] = "IsValid";
    VerificationStatus[VerificationStatus["Warnings"] = 1024] = "Warnings";
    VerificationStatus[VerificationStatus["Service"] = 2048] = "Service";
    VerificationStatus[VerificationStatus["Training"] = 4096] = "Training";
    VerificationStatus[VerificationStatus["Scripted"] = 8192] = "Scripted";
    VerificationStatus[VerificationStatus["Deleted"] = 16384] = "Deleted";
})(VerificationStatus || (VerificationStatus = {}));
export class DocumentDataViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.documentId = _data["documentId"];
            this.blobId = _data["blobId"];
            this.type = _data["type"];
            this.data = _data["data"];
            this.preview = _data["preview"];
            this.text = _data["text"];
            this.info = _data["info"];
            this.contentType = _data["contentType"];
            this.resultId = _data["resultId"];
            this.index = _data["index"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.resolution = _data["resolution"];
            this.availability = _data["availability"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentDataViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["documentId"] = this.documentId;
        data["blobId"] = this.blobId;
        data["type"] = this.type;
        data["data"] = this.data;
        data["preview"] = this.preview;
        data["text"] = this.text;
        data["info"] = this.info;
        data["contentType"] = this.contentType;
        data["resultId"] = this.resultId;
        data["index"] = this.index;
        data["width"] = this.width;
        data["height"] = this.height;
        data["resolution"] = this.resolution;
        data["availability"] = this.availability;
        return data;
    }
}
export var DocumentDataType;
(function (DocumentDataType) {
    DocumentDataType[DocumentDataType["Image"] = 0] = "Image";
    DocumentDataType[DocumentDataType["Result"] = 1] = "Result";
    DocumentDataType[DocumentDataType["Page"] = 2] = "Page";
    DocumentDataType[DocumentDataType["Definition"] = 10] = "Definition";
    DocumentDataType[DocumentDataType["Training"] = 11] = "Training";
    DocumentDataType[DocumentDataType["Unknown"] = 99] = "Unknown";
    DocumentDataType[DocumentDataType["All"] = 999] = "All";
})(DocumentDataType || (DocumentDataType = {}));
export class CustomDataSetRecord {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.keyId = _data["keyId"];
            this.keyDefId = _data["keyDefId"];
            this.keyValue = _data["keyValue"];
            this.availability = _data["availability"];
            if (Array.isArray(_data["values"])) {
                this.values = [];
                for (let item of _data["values"])
                    this.values.push(CustomDataSetValue.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CustomDataSetRecord();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["keyId"] = this.keyId;
        data["keyDefId"] = this.keyDefId;
        data["keyValue"] = this.keyValue;
        data["availability"] = this.availability;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}
export class CustomDataSetValue {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.defId = _data["defId"];
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.value = _data["value"];
            this.availability = _data["availability"];
            this.verificationId = _data["verificationId"];
            this.verValue = _data["verValue"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.confidence = _data["confidence"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.provider = _data["provider"];
            this.result = _data["result"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CustomDataSetValue();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["defId"] = this.defId;
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["value"] = this.value;
        data["availability"] = this.availability;
        data["verificationId"] = this.verificationId;
        data["verValue"] = this.verValue;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["confidence"] = this.confidence;
        data["type"] = this.type;
        data["status"] = this.status;
        data["provider"] = this.provider;
        data["result"] = this.result;
        return data;
    }
}
export var SortDirection;
(function (SortDirection) {
    SortDirection[SortDirection["Ascending"] = 0] = "Ascending";
    SortDirection[SortDirection["Descending"] = 1] = "Descending";
})(SortDirection || (SortDirection = {}));
export var SortField;
(function (SortField) {
    SortField[SortField["Id"] = 0] = "Id";
    SortField[SortField["Name"] = 1] = "Name";
    SortField[SortField["Description"] = 2] = "Description";
    SortField[SortField["Date"] = 3] = "Date";
    SortField[SortField["Status"] = 4] = "Status";
    SortField[SortField["Category"] = 5] = "Category";
})(SortField || (SortField = {}));
export class DocumentsSummary {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.projectId = _data["projectId"];
            this.serviceType = _data["serviceType"];
            this.serviceId = _data["serviceId"];
            this.usage = _data["usage"];
            this.status = _data["status"];
            this.name = _data["name"];
            this.classId = _data["classId"];
            this.className = _data["className"];
            this.serviceName = _data["serviceName"];
            this.fileType = _data["fileType"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.count = _data["count"];
            this.labelledCount = _data["labelledCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentsSummary();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["serviceType"] = this.serviceType;
        data["serviceId"] = this.serviceId;
        data["usage"] = this.usage;
        data["status"] = this.status;
        data["name"] = this.name;
        data["classId"] = this.classId;
        data["className"] = this.className;
        data["serviceName"] = this.serviceName;
        data["fileType"] = this.fileType;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["count"] = this.count;
        data["labelledCount"] = this.labelledCount;
        return data;
    }
}
export class ProjectUserViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.userFullName = _data["userFullName"];
            this.projectId = _data["projectId"];
            this.serviceId = _data["serviceId"];
            this.groupId = _data["groupId"];
            this.role = _data["role"];
            this.permission = _data["permission"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
            this.project = _data["project"] ? ProjectViewModel.fromJS(_data["project"]) : undefined;
            this.service = _data["service"] ? ParameterDefViewModel.fromJS(_data["service"]) : undefined;
            this.group = _data["group"] ? UserGroupViewModel.fromJS(_data["group"]) : undefined;
            if (Array.isArray(_data["balances"])) {
                this.balances = [];
                for (let item of _data["balances"])
                    this.balances.push(AccountBalanceItem.fromJS(item));
            }
            if (Array.isArray(_data["related"])) {
                this.related = [];
                for (let item of _data["related"])
                    this.related.push(ProjectUserViewModel.fromJS(item));
            }
            if (Array.isArray(_data["constraints"])) {
                this.constraints = [];
                for (let item of _data["constraints"])
                    this.constraints.push(ProjectUserConstraintViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectUserViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["userFullName"] = this.userFullName;
        data["projectId"] = this.projectId;
        data["serviceId"] = this.serviceId;
        data["groupId"] = this.groupId;
        data["role"] = this.role;
        data["permission"] = this.permission;
        data["type"] = this.type;
        data["status"] = this.status;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["project"] = this.project ? this.project.toJSON() : undefined;
        data["service"] = this.service ? this.service.toJSON() : undefined;
        data["group"] = this.group ? this.group.toJSON() : undefined;
        if (Array.isArray(this.balances)) {
            data["balances"] = [];
            for (let item of this.balances)
                data["balances"].push(item.toJSON());
        }
        if (Array.isArray(this.related)) {
            data["related"] = [];
            for (let item of this.related)
                data["related"].push(item.toJSON());
        }
        if (Array.isArray(this.constraints)) {
            data["constraints"] = [];
            for (let item of this.constraints)
                data["constraints"].push(item.toJSON());
        }
        return data;
    }
}
export var LinkType;
(function (LinkType) {
    LinkType[LinkType["None"] = 0] = "None";
    LinkType[LinkType["Owner"] = 1] = "Owner";
    LinkType[LinkType["Shared"] = 2] = "Shared";
    LinkType[LinkType["Marketplace"] = 3] = "Marketplace";
    LinkType[LinkType["Error"] = 99] = "Error";
})(LinkType || (LinkType = {}));
export var ProjectUserStatus;
(function (ProjectUserStatus) {
    ProjectUserStatus[ProjectUserStatus["None"] = 0] = "None";
    ProjectUserStatus[ProjectUserStatus["Requested"] = 1] = "Requested";
    ProjectUserStatus[ProjectUserStatus["Rejected"] = 2] = "Rejected";
    ProjectUserStatus[ProjectUserStatus["Approved"] = 3] = "Approved";
    ProjectUserStatus[ProjectUserStatus["Removed"] = 4] = "Removed";
    ProjectUserStatus[ProjectUserStatus["Error"] = 99] = "Error";
})(ProjectUserStatus || (ProjectUserStatus = {}));
export class ProjectViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.status = _data["status"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.comment = _data["comment"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.balance = _data["balance"] ? AccountBalanceItem.fromJS(_data["balance"]) : undefined;
            this.totalDocsCount = _data["totalDocsCount"];
            if (Array.isArray(_data["services"])) {
                this.services = [];
                for (let item of _data["services"])
                    this.services.push(ParameterDefViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["status"] = this.status;
        data["name"] = this.name;
        data["description"] = this.description;
        data["comment"] = this.comment;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["balance"] = this.balance ? this.balance.toJSON() : undefined;
        data["totalDocsCount"] = this.totalDocsCount;
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item.toJSON());
        }
        return data;
    }
}
export var ProjectStatus;
(function (ProjectStatus) {
    ProjectStatus[ProjectStatus["None"] = 0] = "None";
    ProjectStatus[ProjectStatus["Active"] = 1] = "Active";
    ProjectStatus[ProjectStatus["Disabled"] = 2] = "Disabled";
    ProjectStatus[ProjectStatus["Requested"] = 10] = "Requested";
    ProjectStatus[ProjectStatus["Verification"] = 11] = "Verification";
    ProjectStatus[ProjectStatus["Rejected"] = 20] = "Rejected";
    ProjectStatus[ProjectStatus["Deleted"] = 90] = "Deleted";
    ProjectStatus[ProjectStatus["Error"] = 99] = "Error";
})(ProjectStatus || (ProjectStatus = {}));
export class AccountBalanceItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceId = _data["serviceId"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.projectId = _data["projectId"];
            this.bundleId = _data["bundleId"];
            this.userId = _data["userId"];
            this.drCount = _data["drCount"];
            this.crCount = _data["crCount"];
            this.dr = _data["dr"];
            this.cr = _data["cr"];
            this.balance = _data["balance"];
            this.project = _data["project"];
            this.service = _data["service"];
            this.serviceType = _data["serviceType"];
            this.bundle = _data["bundle"];
            this.name = _data["name"];
            this.userName = _data["userName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AccountBalanceItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceId"] = this.serviceId;
        data["serviceTypeId"] = this.serviceTypeId;
        data["projectId"] = this.projectId;
        data["bundleId"] = this.bundleId;
        data["userId"] = this.userId;
        data["drCount"] = this.drCount;
        data["crCount"] = this.crCount;
        data["dr"] = this.dr;
        data["cr"] = this.cr;
        data["balance"] = this.balance;
        data["project"] = this.project;
        data["service"] = this.service;
        data["serviceType"] = this.serviceType;
        data["bundle"] = this.bundle;
        data["name"] = this.name;
        data["userName"] = this.userName;
        return data;
    }
}
export class UserGroupViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroupViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["status"] = this.status;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        return data;
    }
}
export var UserGroupType;
(function (UserGroupType) {
    UserGroupType[UserGroupType["Default"] = 0] = "Default";
    UserGroupType[UserGroupType["Partner"] = 1] = "Partner";
    UserGroupType[UserGroupType["Reseller"] = 2] = "Reseller";
    UserGroupType[UserGroupType["Corporate"] = 3] = "Corporate";
    UserGroupType[UserGroupType["Company"] = 4] = "Company";
    UserGroupType[UserGroupType["Individual"] = 5] = "Individual";
})(UserGroupType || (UserGroupType = {}));
export var UserGroupStatus;
(function (UserGroupStatus) {
    UserGroupStatus[UserGroupStatus["Active"] = 0] = "Active";
    UserGroupStatus[UserGroupStatus["Deleted"] = 99] = "Deleted";
})(UserGroupStatus || (UserGroupStatus = {}));
export class ProjectUserConstraintViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.projectUserId = _data["projectUserId"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.intervalType = _data["intervalType"];
            this.interval = _data["interval"];
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : undefined;
            this.key = _data["key"];
            this.value = _data["value"];
            this.comment = _data["comment"];
            this.userId = _data["userId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectUserConstraintViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectUserId"] = this.projectUserId;
        data["type"] = this.type;
        data["status"] = this.status;
        data["intervalType"] = this.intervalType;
        data["interval"] = this.interval;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : undefined;
        data["key"] = this.key;
        data["value"] = this.value;
        data["comment"] = this.comment;
        data["userId"] = this.userId;
        return data;
    }
}
export var ConstraintType;
(function (ConstraintType) {
    ConstraintType[ConstraintType["Count"] = 1] = "Count";
    ConstraintType[ConstraintType["Credit"] = 2] = "Credit";
})(ConstraintType || (ConstraintType = {}));
export var ConstraintStatus;
(function (ConstraintStatus) {
    ConstraintStatus[ConstraintStatus["Active"] = 0] = "Active";
    ConstraintStatus[ConstraintStatus["Deleted"] = 99] = "Deleted";
})(ConstraintStatus || (ConstraintStatus = {}));
export var ConstraintIntervalType;
(function (ConstraintIntervalType) {
    ConstraintIntervalType[ConstraintIntervalType["OnceOff"] = 0] = "OnceOff";
    ConstraintIntervalType[ConstraintIntervalType["Day"] = 1] = "Day";
    ConstraintIntervalType[ConstraintIntervalType["Week"] = 2] = "Week";
    ConstraintIntervalType[ConstraintIntervalType["Month"] = 3] = "Month";
    ConstraintIntervalType[ConstraintIntervalType["Year"] = 4] = "Year";
    ConstraintIntervalType[ConstraintIntervalType["Timespan"] = 5] = "Timespan";
})(ConstraintIntervalType || (ConstraintIntervalType = {}));
export class RatingViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.paramDefId = _data["paramDefId"];
            this.parameterId = _data["parameterId"];
            this.verificationId = _data["verificationId"];
            this.userId = _data["userId"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.value = _data["value"];
            this.comment = _data["comment"];
            this.userName = _data["userName"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RatingViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["paramDefId"] = this.paramDefId;
        data["parameterId"] = this.parameterId;
        data["verificationId"] = this.verificationId;
        data["userId"] = this.userId;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["value"] = this.value;
        data["comment"] = this.comment;
        data["userName"] = this.userName;
        return data;
    }
}
export class UserInviteViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.email = _data["email"];
            this.projectId = _data["projectId"];
            this.serviceId = _data["serviceId"];
            this.message = _data["message"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserInviteViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["projectId"] = this.projectId;
        data["serviceId"] = this.serviceId;
        data["message"] = this.message;
        return data;
    }
}
export class NotificationPreferences {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (_data["preferences"]) {
                this.preferences = {};
                for (let key in _data["preferences"]) {
                    if (_data["preferences"].hasOwnProperty(key))
                        this.preferences[key] = _data["preferences"][key] ? NotificationOption.fromJS(_data["preferences"][key]) : new NotificationOption();
                }
            }
            if (_data["map"]) {
                this.map = {};
                for (let key in _data["map"]) {
                    if (_data["map"].hasOwnProperty(key))
                        this.map[key] = _data["map"][key] !== undefined ? _data["map"][key] : [];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationPreferences();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.preferences) {
            data["preferences"] = {};
            for (let key in this.preferences) {
                if (this.preferences.hasOwnProperty(key))
                    data["preferences"][key] = this.preferences[key] ? this.preferences[key].toJSON() : undefined;
            }
        }
        if (this.map) {
            data["map"] = {};
            for (let key in this.map) {
                if (this.map.hasOwnProperty(key))
                    data["map"][key] = this.map[key];
            }
        }
        return data;
    }
}
export var NotificationArea;
(function (NotificationArea) {
    NotificationArea[NotificationArea["None"] = 0] = "None";
    NotificationArea[NotificationArea["Login"] = 1] = "Login";
    NotificationArea[NotificationArea["Project"] = 2] = "Project";
    NotificationArea[NotificationArea["Service"] = 3] = "Service";
    NotificationArea[NotificationArea["Document"] = 4] = "Document";
    NotificationArea[NotificationArea["Verification"] = 5] = "Verification";
    NotificationArea[NotificationArea["Marketplace"] = 6] = "Marketplace";
    NotificationArea[NotificationArea["Payment"] = 7] = "Payment";
    NotificationArea[NotificationArea["Preferences"] = 8] = "Preferences";
    NotificationArea[NotificationArea["Settings"] = 9] = "Settings";
    NotificationArea[NotificationArea["Support"] = 10] = "Support";
    NotificationArea[NotificationArea["WorkItem"] = 11] = "WorkItem";
})(NotificationArea || (NotificationArea = {}));
export class NotificationOption {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["settings"])) {
                this.settings = [];
                for (let item of _data["settings"])
                    this.settings.push(NotificationSetting.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationOption();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        return data;
    }
}
export class NotificationSetting {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.event = _data["event"];
            this.type = _data["type"];
            this.enabled = _data["enabled"];
            if (_data["contacts"]) {
                this.contacts = {};
                for (let key in _data["contacts"]) {
                    if (_data["contacts"].hasOwnProperty(key))
                        this.contacts[key] = _data["contacts"][key];
                }
            }
            if (Array.isArray(_data["contactIds"])) {
                this.contactIds = [];
                for (let item of _data["contactIds"])
                    this.contactIds.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSetting();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["event"] = this.event;
        data["type"] = this.type;
        data["enabled"] = this.enabled;
        if (this.contacts) {
            data["contacts"] = {};
            for (let key in this.contacts) {
                if (this.contacts.hasOwnProperty(key))
                    data["contacts"][key] = this.contacts[key];
            }
        }
        if (Array.isArray(this.contactIds)) {
            data["contactIds"] = [];
            for (let item of this.contactIds)
                data["contactIds"].push(item);
        }
        return data;
    }
}
export var NotificationEvent;
(function (NotificationEvent) {
    NotificationEvent[NotificationEvent["Create"] = 1] = "Create";
    NotificationEvent[NotificationEvent["Update"] = 2] = "Update";
    NotificationEvent[NotificationEvent["Delete"] = 4] = "Delete";
    NotificationEvent[NotificationEvent["Process"] = 8] = "Process";
    NotificationEvent[NotificationEvent["Training"] = 16] = "Training";
    NotificationEvent[NotificationEvent["Upload"] = 32] = "Upload";
    NotificationEvent[NotificationEvent["Request"] = 64] = "Request";
    NotificationEvent[NotificationEvent["Invite"] = 128] = "Invite";
    NotificationEvent[NotificationEvent["Approve"] = 256] = "Approve";
    NotificationEvent[NotificationEvent["Error"] = 512] = "Error";
    NotificationEvent[NotificationEvent["Status"] = 1024] = "Status";
    NotificationEvent[NotificationEvent["Monitor"] = 2048] = "Monitor";
    NotificationEvent[NotificationEvent["Reset"] = 4096] = "Reset";
    NotificationEvent[NotificationEvent["Bug"] = 8092] = "Bug";
    NotificationEvent[NotificationEvent["Info"] = 16384] = "Info";
    NotificationEvent[NotificationEvent["Progress"] = 65536] = "Progress";
    NotificationEvent[NotificationEvent["Toast"] = 131072] = "Toast";
    NotificationEvent[NotificationEvent["Confirm"] = 262144] = "Confirm";
    NotificationEvent[NotificationEvent["Transfer"] = 524288] = "Transfer";
    NotificationEvent[NotificationEvent["Escelate"] = 1048576] = "Escelate";
    NotificationEvent[NotificationEvent["Verify"] = 2097152] = "Verify";
    NotificationEvent[NotificationEvent["Linked"] = 4194304] = "Linked";
    NotificationEvent[NotificationEvent["Reject"] = 8388608] = "Reject";
})(NotificationEvent || (NotificationEvent = {}));
export var NotificationStatus;
(function (NotificationStatus) {
    NotificationStatus[NotificationStatus["None"] = 0] = "None";
    NotificationStatus[NotificationStatus["Created"] = 1] = "Created";
    NotificationStatus[NotificationStatus["Sent"] = 2] = "Sent";
    NotificationStatus[NotificationStatus["Delivered"] = 3] = "Delivered";
    NotificationStatus[NotificationStatus["Display"] = 4] = "Display";
    NotificationStatus[NotificationStatus["Ignore"] = 5] = "Ignore";
    NotificationStatus[NotificationStatus["Deleted"] = 90] = "Deleted";
    NotificationStatus[NotificationStatus["Error"] = 99] = "Error";
})(NotificationStatus || (NotificationStatus = {}));
export class NotificationViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.projectId = _data["projectId"];
            this.classId = _data["classId"];
            this.serviceId = _data["serviceId"];
            this.documentId = _data["documentId"];
            this.workItemId = _data["workItemId"];
            this.shredId = _data["shredId"];
            this.verificationId = _data["verificationId"];
            this.contactId = _data["contactId"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.area = _data["area"];
            this.event = _data["event"];
            this.level = _data["level"];
            this.to = _data["to"];
            this.address = _data["address"];
            this.subject = _data["subject"];
            this.contentType = _data["contentType"];
            this.body = _data["body"];
            this.error = _data["error"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.sent = _data["sent"] ? new Date(_data["sent"].toString()) : undefined;
            this.delivered = _data["delivered"] ? new Date(_data["delivered"].toString()) : undefined;
            this.readDate = _data["readDate"] ? new Date(_data["readDate"].toString()) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
            this.contact = _data["contact"] ? ContactViewModel.fromJS(_data["contact"]) : undefined;
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [];
                for (let item of _data["attachments"])
                    this.attachments.push(NotificationAttachmentViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["projectId"] = this.projectId;
        data["classId"] = this.classId;
        data["serviceId"] = this.serviceId;
        data["documentId"] = this.documentId;
        data["workItemId"] = this.workItemId;
        data["shredId"] = this.shredId;
        data["verificationId"] = this.verificationId;
        data["contactId"] = this.contactId;
        data["type"] = this.type;
        data["status"] = this.status;
        data["area"] = this.area;
        data["event"] = this.event;
        data["level"] = this.level;
        data["to"] = this.to;
        data["address"] = this.address;
        data["subject"] = this.subject;
        data["contentType"] = this.contentType;
        data["body"] = this.body;
        data["error"] = this.error;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["sent"] = this.sent ? this.sent.toISOString() : undefined;
        data["delivered"] = this.delivered ? this.delivered.toISOString() : undefined;
        data["readDate"] = this.readDate ? this.readDate.toISOString() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["contact"] = this.contact ? this.contact.toJSON() : undefined;
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        return data;
    }
}
export var NotificationLevel;
(function (NotificationLevel) {
    NotificationLevel[NotificationLevel["Error"] = 1] = "Error";
    NotificationLevel[NotificationLevel["Exception"] = 2] = "Exception";
    NotificationLevel[NotificationLevel["Warning"] = 4] = "Warning";
    NotificationLevel[NotificationLevel["Info"] = 8] = "Info";
    NotificationLevel[NotificationLevel["Debug"] = 16] = "Debug";
    NotificationLevel[NotificationLevel["Trace"] = 32] = "Trace";
})(NotificationLevel || (NotificationLevel = {}));
export class NotificationAttachmentViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.notificationId = _data["notificationId"];
            this.contentType = _data["contentType"];
            this.contentId = _data["contentId"];
            this.data = _data["data"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationAttachmentViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["notificationId"] = this.notificationId;
        data["contentType"] = this.contentType;
        data["contentId"] = this.contentId;
        data["data"] = this.data;
        return data;
    }
}
export class DocParamSummary extends DocumentsSummary {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.pdId = _data["pdId"];
            this.paramDefName = _data["paramDefName"];
            this.category = _data["category"];
            this.grouping = _data["grouping"];
            this.valueType = _data["valueType"];
            this.value = _data["value"];
            this.index = _data["index"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocParamSummary();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["pdId"] = this.pdId;
        data["paramDefName"] = this.paramDefName;
        data["category"] = this.category;
        data["grouping"] = this.grouping;
        data["valueType"] = this.valueType;
        data["value"] = this.value;
        data["index"] = this.index;
        super.toJSON(data);
        return data;
    }
}
export class DocumentExtraction {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.label = _data["label"];
            this.category = _data["category"];
            this.grouping = _data["grouping"];
            this.valueType = _data["valueType"];
            this.index = _data["index"];
            this.paramId = _data["paramId"];
            this.parentParamId = _data["parentParamId"];
            this.paramIndex = _data["paramIndex"];
            this.paramValue = _data["paramValue"];
            this.verificationId = _data["verificationId"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.value = _data["value"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.confidence = _data["confidence"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.charge = _data["charge"];
            this.provider = _data["provider"];
            this.result = _data["result"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentExtraction();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["label"] = this.label;
        data["category"] = this.category;
        data["grouping"] = this.grouping;
        data["valueType"] = this.valueType;
        data["index"] = this.index;
        data["paramId"] = this.paramId;
        data["parentParamId"] = this.parentParamId;
        data["paramIndex"] = this.paramIndex;
        data["paramValue"] = this.paramValue;
        data["verificationId"] = this.verificationId;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["value"] = this.value;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["confidence"] = this.confidence;
        data["type"] = this.type;
        data["status"] = this.status;
        data["charge"] = this.charge;
        data["provider"] = this.provider;
        data["result"] = this.result;
        return data;
    }
}
export class OrderViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.authorizationId = _data["authorizationId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OrderViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["authorizationId"] = this.authorizationId;
        return data;
    }
}
export class PaymentViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.projectId = _data["projectId"];
            this.bundleId = _data["bundleId"];
            this.amount = _data["amount"];
            this.status = _data["status"];
            this.reference = _data["reference"];
            this.resultCode = _data["resultCode"];
            this.result = _data["result"];
            this.reason = _data["reason"];
            this.description = _data["description"];
            this.error = _data["error"];
            this.data = _data["data"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
            this.project = _data["project"] ? ProjectViewModel.fromJS(_data["project"]) : undefined;
            this.bundle = _data["bundle"] ? BundlesViewModel.fromJS(_data["bundle"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["projectId"] = this.projectId;
        data["bundleId"] = this.bundleId;
        data["amount"] = this.amount;
        data["status"] = this.status;
        data["reference"] = this.reference;
        data["resultCode"] = this.resultCode;
        data["result"] = this.result;
        data["reason"] = this.reason;
        data["description"] = this.description;
        data["error"] = this.error;
        data["data"] = this.data;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["project"] = this.project ? this.project.toJSON() : undefined;
        data["bundle"] = this.bundle ? this.bundle.toJSON() : undefined;
        return data;
    }
}
export var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus[PaymentStatus["None"] = 0] = "None";
    PaymentStatus[PaymentStatus["Captured"] = 10] = "Captured";
    PaymentStatus[PaymentStatus["Authorization"] = 11] = "Authorization";
    PaymentStatus[PaymentStatus["Processing"] = 20] = "Processing";
    PaymentStatus[PaymentStatus["Complete"] = 30] = "Complete";
    PaymentStatus[PaymentStatus["Credit"] = 40] = "Credit";
    PaymentStatus[PaymentStatus["Rejected"] = 50] = "Rejected";
    PaymentStatus[PaymentStatus["Declined"] = 60] = "Declined";
    PaymentStatus[PaymentStatus["Error"] = 70] = "Error";
    PaymentStatus[PaymentStatus["Deleted"] = 90] = "Deleted";
    PaymentStatus[PaymentStatus["Unknown"] = 99] = "Unknown";
})(PaymentStatus || (PaymentStatus = {}));
export class TransactionsAuditViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceId = _data["serviceId"];
            this.projectId = _data["projectId"];
            this.bundleId = _data["bundleId"];
            this.paymentId = _data["paymentId"];
            this.chargeId = _data["chargeId"];
            this.relatedTxnId = _data["relatedTxnId"];
            this.userId = _data["userId"];
            this.runId = _data["runId"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.qty = _data["qty"];
            this.price = _data["price"];
            this.cost = _data["cost"];
            this.isCredit = _data["isCredit"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionsAuditViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceId"] = this.serviceId;
        data["projectId"] = this.projectId;
        data["bundleId"] = this.bundleId;
        data["paymentId"] = this.paymentId;
        data["chargeId"] = this.chargeId;
        data["relatedTxnId"] = this.relatedTxnId;
        data["userId"] = this.userId;
        data["runId"] = this.runId;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["qty"] = this.qty;
        data["price"] = this.price;
        data["cost"] = this.cost;
        data["isCredit"] = this.isCredit;
        return data;
    }
}
export class Group {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isReadOnly = _data["isReadOnly"];
            this.isOnDedicatedCapacity = _data["isOnDedicatedCapacity"];
            this.capacityId = _data["capacityId"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.state = _data["state"];
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(GroupUser.fromJS(item));
            }
            if (Array.isArray(_data["reports"])) {
                this.reports = [];
                for (let item of _data["reports"])
                    this.reports.push(Report.fromJS(item));
            }
            if (Array.isArray(_data["dashboards"])) {
                this.dashboards = [];
                for (let item of _data["dashboards"])
                    this.dashboards.push(Dashboard.fromJS(item));
            }
            if (Array.isArray(_data["datasets"])) {
                this.datasets = [];
                for (let item of _data["datasets"])
                    this.datasets.push(Dataset.fromJS(item));
            }
            if (Array.isArray(_data["dataflows"])) {
                this.dataflows = [];
                for (let item of _data["dataflows"])
                    this.dataflows.push(Dataflow.fromJS(item));
            }
            this.dataflowStorageId = _data["dataflowStorageId"];
            if (Array.isArray(_data["workbooks"])) {
                this.workbooks = [];
                for (let item of _data["workbooks"])
                    this.workbooks.push(Workbook.fromJS(item));
            }
            this.pipelineId = _data["pipelineId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isReadOnly"] = this.isReadOnly;
        data["isOnDedicatedCapacity"] = this.isOnDedicatedCapacity;
        data["capacityId"] = this.capacityId;
        data["description"] = this.description;
        data["type"] = this.type;
        data["state"] = this.state;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.reports)) {
            data["reports"] = [];
            for (let item of this.reports)
                data["reports"].push(item.toJSON());
        }
        if (Array.isArray(this.dashboards)) {
            data["dashboards"] = [];
            for (let item of this.dashboards)
                data["dashboards"].push(item.toJSON());
        }
        if (Array.isArray(this.datasets)) {
            data["datasets"] = [];
            for (let item of this.datasets)
                data["datasets"].push(item.toJSON());
        }
        if (Array.isArray(this.dataflows)) {
            data["dataflows"] = [];
            for (let item of this.dataflows)
                data["dataflows"].push(item.toJSON());
        }
        data["dataflowStorageId"] = this.dataflowStorageId;
        if (Array.isArray(this.workbooks)) {
            data["workbooks"] = [];
            for (let item of this.workbooks)
                data["workbooks"].push(item.toJSON());
        }
        data["pipelineId"] = this.pipelineId;
        return data;
    }
}
export class GroupUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.groupUserAccessRight = _data["groupUserAccessRight"] ? GroupUserAccessRight.fromJS(_data["groupUserAccessRight"]) : undefined;
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GroupUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["groupUserAccessRight"] = this.groupUserAccessRight ? this.groupUserAccessRight.toJSON() : undefined;
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class GroupUserAccessRight {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GroupUserAccessRight();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class PrincipalType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PrincipalType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class Report {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.webUrl = _data["webUrl"];
            this.embedUrl = _data["embedUrl"];
            this.datasetId = _data["datasetId"];
            this.description = _data["description"];
            this.createdBy = _data["createdBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : undefined;
            this.modifiedDateTime = _data["modifiedDateTime"] ? new Date(_data["modifiedDateTime"].toString()) : undefined;
            this.endorsementDetails = _data["endorsementDetails"] ? EndorsementDetails.fromJS(_data["endorsementDetails"]) : undefined;
            this.sensitivityLabel = _data["sensitivityLabel"] ? SensitivityLabel.fromJS(_data["sensitivityLabel"]) : undefined;
            this.reportType = _data["reportType"];
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(ReportUser.fromJS(item));
            }
            if (Array.isArray(_data["subscriptions"])) {
                this.subscriptions = [];
                for (let item of _data["subscriptions"])
                    this.subscriptions.push(Subscription.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Report();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["webUrl"] = this.webUrl;
        data["embedUrl"] = this.embedUrl;
        data["datasetId"] = this.datasetId;
        data["description"] = this.description;
        data["createdBy"] = this.createdBy;
        data["modifiedBy"] = this.modifiedBy;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : undefined;
        data["modifiedDateTime"] = this.modifiedDateTime ? this.modifiedDateTime.toISOString() : undefined;
        data["endorsementDetails"] = this.endorsementDetails ? this.endorsementDetails.toJSON() : undefined;
        data["sensitivityLabel"] = this.sensitivityLabel ? this.sensitivityLabel.toJSON() : undefined;
        data["reportType"] = this.reportType;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.subscriptions)) {
            data["subscriptions"] = [];
            for (let item of this.subscriptions)
                data["subscriptions"].push(item.toJSON());
        }
        return data;
    }
}
export class EndorsementDetails {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.endorsement = _data["endorsement"];
            this.certifiedBy = _data["certifiedBy"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EndorsementDetails();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["endorsement"] = this.endorsement;
        data["certifiedBy"] = this.certifiedBy;
        return data;
    }
}
export class SensitivityLabel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.labelId = _data["labelId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SensitivityLabel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["labelId"] = this.labelId;
        return data;
    }
}
export class ReportUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.reportUserAccessRight = _data["reportUserAccessRight"] ? ReportUserAccessRight.fromJS(_data["reportUserAccessRight"]) : undefined;
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReportUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["reportUserAccessRight"] = this.reportUserAccessRight ? this.reportUserAccessRight.toJSON() : undefined;
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class ReportUserAccessRight {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReportUserAccessRight();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class Subscription {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.artifactId = _data["artifactId"];
            this.artifactDisplayName = _data["artifactDisplayName"];
            this.subArtifactDisplayName = _data["subArtifactDisplayName"];
            this.artifactType = _data["artifactType"];
            this.isEnabled = _data["isEnabled"];
            this.frequency = _data["frequency"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
            this.linkToContent = _data["linkToContent"];
            this.previewImage = _data["previewImage"];
            this.attachmentFormat = _data["attachmentFormat"];
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(SubscriptionUser.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Subscription();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["artifactId"] = this.artifactId;
        data["artifactDisplayName"] = this.artifactDisplayName;
        data["subArtifactDisplayName"] = this.subArtifactDisplayName;
        data["artifactType"] = this.artifactType;
        data["isEnabled"] = this.isEnabled;
        data["frequency"] = this.frequency;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
        data["linkToContent"] = this.linkToContent;
        data["previewImage"] = this.previewImage;
        data["attachmentFormat"] = this.attachmentFormat;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}
export class SubscriptionUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class Dashboard {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.isReadOnly = _data["isReadOnly"];
            this.embedUrl = _data["embedUrl"];
            if (Array.isArray(_data["tiles"])) {
                this.tiles = [];
                for (let item of _data["tiles"])
                    this.tiles.push(Tile.fromJS(item));
            }
            this.dataClassification = _data["dataClassification"];
            this.sensitivityLabel = _data["sensitivityLabel"] ? SensitivityLabel.fromJS(_data["sensitivityLabel"]) : undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(DashboardUser.fromJS(item));
            }
            if (Array.isArray(_data["subscriptions"])) {
                this.subscriptions = [];
                for (let item of _data["subscriptions"])
                    this.subscriptions.push(Subscription.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Dashboard();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isReadOnly"] = this.isReadOnly;
        data["embedUrl"] = this.embedUrl;
        if (Array.isArray(this.tiles)) {
            data["tiles"] = [];
            for (let item of this.tiles)
                data["tiles"].push(item.toJSON());
        }
        data["dataClassification"] = this.dataClassification;
        data["sensitivityLabel"] = this.sensitivityLabel ? this.sensitivityLabel.toJSON() : undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.subscriptions)) {
            data["subscriptions"] = [];
            for (let item of this.subscriptions)
                data["subscriptions"].push(item.toJSON());
        }
        return data;
    }
}
export class Tile {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.rowSpan = _data["rowSpan"];
            this.colSpan = _data["colSpan"];
            this.embedUrl = _data["embedUrl"];
            this.embedData = _data["embedData"];
            this.reportId = _data["reportId"];
            this.datasetId = _data["datasetId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Tile();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["rowSpan"] = this.rowSpan;
        data["colSpan"] = this.colSpan;
        data["embedUrl"] = this.embedUrl;
        data["embedData"] = this.embedData;
        data["reportId"] = this.reportId;
        data["datasetId"] = this.datasetId;
        return data;
    }
}
export class DashboardUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.dashboardUserAccessRight = _data["dashboardUserAccessRight"] ? DashboardUserAccessRight.fromJS(_data["dashboardUserAccessRight"]) : undefined;
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["dashboardUserAccessRight"] = this.dashboardUserAccessRight ? this.dashboardUserAccessRight.toJSON() : undefined;
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class DashboardUserAccessRight {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardUserAccessRight();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class Dataset {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.configuredBy = _data["configuredBy"];
            this.addRowsAPIEnabled = _data["addRowsAPIEnabled"];
            this.webUrl = _data["webUrl"];
            this.isRefreshable = _data["isRefreshable"];
            this.isEffectiveIdentityRequired = _data["isEffectiveIdentityRequired"];
            this.isEffectiveIdentityRolesRequired = _data["isEffectiveIdentityRolesRequired"];
            this.isOnPremGatewayRequired = _data["isOnPremGatewayRequired"];
            this.encryption = _data["encryption"] ? Encryption.fromJS(_data["encryption"]) : undefined;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : undefined;
            this.contentProviderType = _data["contentProviderType"];
            this.createReportEmbedURL = _data["createReportEmbedURL"];
            this.qnaEmbedURL = _data["qnaEmbedURL"];
            this.description = _data["description"];
            this.endorsementDetails = _data["endorsementDetails"] ? EndorsementDetails.fromJS(_data["endorsementDetails"]) : undefined;
            if (Array.isArray(_data["datasourceUsages"])) {
                this.datasourceUsages = [];
                for (let item of _data["datasourceUsages"])
                    this.datasourceUsages.push(DatasourceUsage.fromJS(item));
            }
            if (Array.isArray(_data["upstreamDataflows"])) {
                this.upstreamDataflows = [];
                for (let item of _data["upstreamDataflows"])
                    this.upstreamDataflows.push(DependentDataflow.fromJS(item));
            }
            if (Array.isArray(_data["tables"])) {
                this.tables = [];
                for (let item of _data["tables"])
                    this.tables.push(Table.fromJS(item));
            }
            this.sensitivityLabel = _data["sensitivityLabel"] ? SensitivityLabel.fromJS(_data["sensitivityLabel"]) : undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(DatasetUser.fromJS(item));
            }
            this.schemaRetrievalError = _data["schemaRetrievalError"];
            this.schemaMayNotBeUpToDate = _data["schemaMayNotBeUpToDate"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Dataset();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["configuredBy"] = this.configuredBy;
        data["addRowsAPIEnabled"] = this.addRowsAPIEnabled;
        data["webUrl"] = this.webUrl;
        data["isRefreshable"] = this.isRefreshable;
        data["isEffectiveIdentityRequired"] = this.isEffectiveIdentityRequired;
        data["isEffectiveIdentityRolesRequired"] = this.isEffectiveIdentityRolesRequired;
        data["isOnPremGatewayRequired"] = this.isOnPremGatewayRequired;
        data["encryption"] = this.encryption ? this.encryption.toJSON() : undefined;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : undefined;
        data["contentProviderType"] = this.contentProviderType;
        data["createReportEmbedURL"] = this.createReportEmbedURL;
        data["qnaEmbedURL"] = this.qnaEmbedURL;
        data["description"] = this.description;
        data["endorsementDetails"] = this.endorsementDetails ? this.endorsementDetails.toJSON() : undefined;
        if (Array.isArray(this.datasourceUsages)) {
            data["datasourceUsages"] = [];
            for (let item of this.datasourceUsages)
                data["datasourceUsages"].push(item.toJSON());
        }
        if (Array.isArray(this.upstreamDataflows)) {
            data["upstreamDataflows"] = [];
            for (let item of this.upstreamDataflows)
                data["upstreamDataflows"].push(item.toJSON());
        }
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item.toJSON());
        }
        data["sensitivityLabel"] = this.sensitivityLabel ? this.sensitivityLabel.toJSON() : undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["schemaRetrievalError"] = this.schemaRetrievalError;
        data["schemaMayNotBeUpToDate"] = this.schemaMayNotBeUpToDate;
        return data;
    }
}
export class Encryption {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.encryptionStatus = _data["encryptionStatus"] ? EncryptionStatus.fromJS(_data["encryptionStatus"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Encryption();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["encryptionStatus"] = this.encryptionStatus ? this.encryptionStatus.toJSON() : undefined;
        return data;
    }
}
export class EncryptionStatus {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EncryptionStatus();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class DatasourceUsage {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.datasourceInstanceId = _data["datasourceInstanceId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DatasourceUsage();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["datasourceInstanceId"] = this.datasourceInstanceId;
        return data;
    }
}
export class DependentDataflow {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.targetDataflowId = _data["targetDataflowId"];
            this.groupId = _data["groupId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DependentDataflow();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["targetDataflowId"] = this.targetDataflowId;
        data["groupId"] = this.groupId;
        return data;
    }
}
export class Table {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["columns"])) {
                this.columns = [];
                for (let item of _data["columns"])
                    this.columns.push(Column.fromJS(item));
            }
            if (Array.isArray(_data["rows"])) {
                this.rows = [];
                for (let item of _data["rows"])
                    this.rows.push(Row.fromJS(item));
            }
            if (Array.isArray(_data["measures"])) {
                this.measures = [];
                for (let item of _data["measures"])
                    this.measures.push(Measure.fromJS(item));
            }
            this.isHidden = _data["isHidden"];
            this.description = _data["description"];
            if (Array.isArray(_data["source"])) {
                this.source = [];
                for (let item of _data["source"])
                    this.source.push(ASMashupExpression.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Table();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        if (Array.isArray(this.measures)) {
            data["measures"] = [];
            for (let item of this.measures)
                data["measures"].push(item.toJSON());
        }
        data["isHidden"] = this.isHidden;
        data["description"] = this.description;
        if (Array.isArray(this.source)) {
            data["source"] = [];
            for (let item of this.source)
                data["source"].push(item.toJSON());
        }
        return data;
    }
}
export class Column {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.dataType = _data["dataType"];
            this.formatString = _data["formatString"];
            this.sortByColumn = _data["sortByColumn"];
            this.dataCategory = _data["dataCategory"];
            this.isHidden = _data["isHidden"];
            this.summarizeBy = _data["summarizeBy"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Column();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dataType"] = this.dataType;
        data["formatString"] = this.formatString;
        data["sortByColumn"] = this.sortByColumn;
        data["dataCategory"] = this.dataCategory;
        data["isHidden"] = this.isHidden;
        data["summarizeBy"] = this.summarizeBy;
        return data;
    }
}
export class Row {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Row();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}
export class Measure {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.expression = _data["expression"];
            this.formatString = _data["formatString"];
            this.description = _data["description"];
            this.isHidden = _data["isHidden"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Measure();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["expression"] = this.expression;
        data["formatString"] = this.formatString;
        data["description"] = this.description;
        data["isHidden"] = this.isHidden;
        return data;
    }
}
export class ASMashupExpression {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.expression = _data["expression"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ASMashupExpression();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["expression"] = this.expression;
        return data;
    }
}
export class DatasetUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.datasetUserAccessRight = _data["datasetUserAccessRight"] ? DatasetUserAccessRight.fromJS(_data["datasetUserAccessRight"]) : undefined;
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DatasetUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["datasetUserAccessRight"] = this.datasetUserAccessRight ? this.datasetUserAccessRight.toJSON() : undefined;
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class DatasetUserAccessRight {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DatasetUserAccessRight();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class Dataflow {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.objectId = _data["objectId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.modelUrl = _data["modelUrl"];
            this.configuredBy = _data["configuredBy"];
            this.modifiedBy = _data["modifiedBy"];
            this.endorsementDetails = _data["endorsementDetails"] ? EndorsementDetails.fromJS(_data["endorsementDetails"]) : undefined;
            this.modifiedDateTime = _data["modifiedDateTime"] ? new Date(_data["modifiedDateTime"].toString()) : undefined;
            if (Array.isArray(_data["datasourceUsages"])) {
                this.datasourceUsages = [];
                for (let item of _data["datasourceUsages"])
                    this.datasourceUsages.push(DatasourceUsage.fromJS(item));
            }
            if (Array.isArray(_data["upstreamDataflows"])) {
                this.upstreamDataflows = [];
                for (let item of _data["upstreamDataflows"])
                    this.upstreamDataflows.push(DependentDataflow.fromJS(item));
            }
            this.sensitivityLabel = _data["sensitivityLabel"] ? SensitivityLabel.fromJS(_data["sensitivityLabel"]) : undefined;
            if (Array.isArray(_data["users"])) {
                this.users = [];
                for (let item of _data["users"])
                    this.users.push(DataflowUser.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Dataflow();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["objectId"] = this.objectId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["modelUrl"] = this.modelUrl;
        data["configuredBy"] = this.configuredBy;
        data["modifiedBy"] = this.modifiedBy;
        data["endorsementDetails"] = this.endorsementDetails ? this.endorsementDetails.toJSON() : undefined;
        data["modifiedDateTime"] = this.modifiedDateTime ? this.modifiedDateTime.toISOString() : undefined;
        if (Array.isArray(this.datasourceUsages)) {
            data["datasourceUsages"] = [];
            for (let item of this.datasourceUsages)
                data["datasourceUsages"].push(item.toJSON());
        }
        if (Array.isArray(this.upstreamDataflows)) {
            data["upstreamDataflows"] = [];
            for (let item of this.upstreamDataflows)
                data["upstreamDataflows"].push(item.toJSON());
        }
        data["sensitivityLabel"] = this.sensitivityLabel ? this.sensitivityLabel.toJSON() : undefined;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}
export class DataflowUser {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.dataflowUserAccessRight = _data["dataflowUserAccessRight"] ? DataflowUserAccessRight.fromJS(_data["dataflowUserAccessRight"]) : undefined;
            this.emailAddress = _data["emailAddress"];
            this.displayName = _data["displayName"];
            this.identifier = _data["identifier"];
            this.graphId = _data["graphId"];
            this.principalType = _data["principalType"] ? PrincipalType.fromJS(_data["principalType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataflowUser();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["dataflowUserAccessRight"] = this.dataflowUserAccessRight ? this.dataflowUserAccessRight.toJSON() : undefined;
        data["emailAddress"] = this.emailAddress;
        data["displayName"] = this.displayName;
        data["identifier"] = this.identifier;
        data["graphId"] = this.graphId;
        data["principalType"] = this.principalType ? this.principalType.toJSON() : undefined;
        return data;
    }
}
export class DataflowUserAccessRight {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataflowUserAccessRight();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
export class Workbook {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.datasetId = _data["datasetId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Workbook();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["datasetId"] = this.datasetId;
        return data;
    }
}
export class Page {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.order = _data["order"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Page();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["order"] = this.order;
        return data;
    }
}
export class RoleViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.usersCount = _data["usersCount"];
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [];
                for (let item of _data["permissions"])
                    this.permissions.push(PermissionViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RoleViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["usersCount"] = this.usersCount;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data;
    }
}
export class PermissionViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.groupName = _data["groupName"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["groupName"] = this.groupName;
        data["description"] = this.description;
        return data;
    }
}
export class ServiceEventViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.projectId = _data["projectId"];
            this.serviceId = _data["serviceId"];
            this.eventType = _data["eventType"];
            this.status = _data["status"];
            this.description = _data["description"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.start = _data["start"] ? new Date(_data["start"].toString()) : undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : undefined;
            this.sourceType = _data["sourceType"];
            this.sourceId = _data["sourceId"];
            this.resultType = _data["resultType"];
            this.resultId = _data["resultId"];
            this.resultBody = _data["resultBody"];
            this.resultCount = _data["resultCount"];
            this.resultStatusId = _data["resultStatusId"];
            this.resultClassId = _data["resultClassId"];
            this.masterId = _data["masterId"];
            this.master = _data["master"] ? ServiceEventViewModel.fromJS(_data["master"]) : undefined;
            if (Array.isArray(_data["related"])) {
                this.related = [];
                for (let item of _data["related"])
                    this.related.push(ServiceEventViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceEventViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["projectId"] = this.projectId;
        data["serviceId"] = this.serviceId;
        data["eventType"] = this.eventType;
        data["status"] = this.status;
        data["description"] = this.description;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["start"] = this.start ? this.start.toISOString() : undefined;
        data["end"] = this.end ? this.end.toISOString() : undefined;
        data["sourceType"] = this.sourceType;
        data["sourceId"] = this.sourceId;
        data["resultType"] = this.resultType;
        data["resultId"] = this.resultId;
        data["resultBody"] = this.resultBody;
        data["resultCount"] = this.resultCount;
        data["resultStatusId"] = this.resultStatusId;
        data["resultClassId"] = this.resultClassId;
        data["masterId"] = this.masterId;
        data["master"] = this.master ? this.master.toJSON() : undefined;
        if (Array.isArray(this.related)) {
            data["related"] = [];
            for (let item of this.related)
                data["related"].push(item.toJSON());
        }
        return data;
    }
}
export var ServiceEventType;
(function (ServiceEventType) {
    ServiceEventType[ServiceEventType["None"] = 0] = "None";
    ServiceEventType[ServiceEventType["Classification"] = 1] = "Classification";
    ServiceEventType[ServiceEventType["Extraction"] = 2] = "Extraction";
    ServiceEventType[ServiceEventType["Verification"] = 3] = "Verification";
    ServiceEventType[ServiceEventType["Index"] = 4] = "Index";
    ServiceEventType[ServiceEventType["Expert"] = 5] = "Expert";
    ServiceEventType[ServiceEventType["Extractor"] = 6] = "Extractor";
    ServiceEventType[ServiceEventType["Train"] = 10] = "Train";
    ServiceEventType[ServiceEventType["Define"] = 11] = "Define";
    ServiceEventType[ServiceEventType["Process"] = 12] = "Process";
})(ServiceEventType || (ServiceEventType = {}));
export var ServiceEventStatus;
(function (ServiceEventStatus) {
    ServiceEventStatus[ServiceEventStatus["None"] = 0] = "None";
    ServiceEventStatus[ServiceEventStatus["Start"] = 1] = "Start";
    ServiceEventStatus[ServiceEventStatus["End"] = 2] = "End";
    ServiceEventStatus[ServiceEventStatus["Cancelled"] = 3] = "Cancelled";
    ServiceEventStatus[ServiceEventStatus["Terminated"] = 4] = "Terminated";
    ServiceEventStatus[ServiceEventStatus["Error"] = 5] = "Error";
})(ServiceEventStatus || (ServiceEventStatus = {}));
export var ReferenceType;
(function (ReferenceType) {
    ReferenceType[ReferenceType["None"] = 0] = "None";
    ReferenceType[ReferenceType["Document"] = 1] = "Document";
    ReferenceType[ReferenceType["Index"] = 2] = "Index";
    ReferenceType[ReferenceType["Schedule"] = 3] = "Schedule";
    ReferenceType[ReferenceType["Expert"] = 4] = "Expert";
    ReferenceType[ReferenceType["Extractor"] = 5] = "Extractor";
    ReferenceType[ReferenceType["Unknown"] = 99] = "Unknown";
})(ReferenceType || (ReferenceType = {}));
export class ServiceChargeViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceId = _data["serviceId"];
            this.status = _data["status"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : undefined;
            this.cost = _data["cost"];
            this.charge = _data["charge"];
            this.comment = _data["comment"];
            this.userId = _data["userId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceChargeViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceId"] = this.serviceId;
        data["status"] = this.status;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : undefined;
        data["cost"] = this.cost;
        data["charge"] = this.charge;
        data["comment"] = this.comment;
        data["userId"] = this.userId;
        return data;
    }
}
export var ChargeStatus;
(function (ChargeStatus) {
    ChargeStatus[ChargeStatus["Active"] = 0] = "Active";
    ChargeStatus[ChargeStatus["Deleted"] = 99] = "Deleted";
})(ChargeStatus || (ChargeStatus = {}));
export class ServiceTypeViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.group = _data["group"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.status = _data["status"];
            this.options = _data["options"];
            this.availability = _data["availability"];
            this.logo = _data["logo"];
            this.icon = _data["icon"];
            this.info = _data["info"];
            this.engine = _data["engine"];
            this.cost = _data["cost"];
            this.charge = _data["charge"];
            this.valueType = _data["valueType"];
            if (Array.isArray(_data["charges"])) {
                this.charges = [];
                for (let item of _data["charges"])
                    this.charges.push(ServiceTypeChargeViewModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceTypeViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["group"] = this.group;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["status"] = this.status;
        data["options"] = this.options;
        data["availability"] = this.availability;
        data["logo"] = this.logo;
        data["icon"] = this.icon;
        data["info"] = this.info;
        data["engine"] = this.engine;
        data["cost"] = this.cost;
        data["charge"] = this.charge;
        data["valueType"] = this.valueType;
        if (Array.isArray(this.charges)) {
            data["charges"] = [];
            for (let item of this.charges)
                data["charges"].push(item.toJSON());
        }
        return data;
    }
}
export var ServiceTypeStatus;
(function (ServiceTypeStatus) {
    ServiceTypeStatus[ServiceTypeStatus["Disabled"] = 0] = "Disabled";
    ServiceTypeStatus[ServiceTypeStatus["Enabled"] = 1] = "Enabled";
})(ServiceTypeStatus || (ServiceTypeStatus = {}));
export var ServiceOptions;
(function (ServiceOptions) {
    ServiceOptions[ServiceOptions["Definition"] = 2] = "Definition";
    ServiceOptions[ServiceOptions["Training"] = 4] = "Training";
    ServiceOptions[ServiceOptions["Classification"] = 8] = "Classification";
    ServiceOptions[ServiceOptions["Code"] = 16] = "Code";
    ServiceOptions[ServiceOptions["Verification"] = 32] = "Verification";
    ServiceOptions[ServiceOptions["Scraping"] = 64] = "Scraping";
    ServiceOptions[ServiceOptions["Attachment"] = 128] = "Attachment";
    ServiceOptions[ServiceOptions["Indexing"] = 256] = "Indexing";
    ServiceOptions[ServiceOptions["Inbox"] = 512] = "Inbox";
    ServiceOptions[ServiceOptions["Outbox"] = 1024] = "Outbox";
    ServiceOptions[ServiceOptions["Processor"] = 2048] = "Processor";
    ServiceOptions[ServiceOptions["Configure"] = 4096] = "Configure";
    ServiceOptions[ServiceOptions["Classes"] = 8192] = "Classes";
    ServiceOptions[ServiceOptions["Keys"] = 16384] = "Keys";
    ServiceOptions[ServiceOptions["Speech"] = 32768] = "Speech";
    ServiceOptions[ServiceOptions["Video"] = 65536] = "Video";
    ServiceOptions[ServiceOptions["Analysis"] = 131072] = "Analysis";
    ServiceOptions[ServiceOptions["Labelling"] = 262144] = "Labelling";
    ServiceOptions[ServiceOptions["Vendors"] = 524288] = "Vendors";
    ServiceOptions[ServiceOptions["BusinessUnits"] = 1048576] = "BusinessUnits";
    ServiceOptions[ServiceOptions["PurchaseOrders"] = 2097152] = "PurchaseOrders";
    ServiceOptions[ServiceOptions["GLCodes"] = 4194304] = "GLCodes";
})(ServiceOptions || (ServiceOptions = {}));
export class ServiceTypeChargeViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.status = _data["status"];
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : undefined;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : undefined;
            this.cost = _data["cost"];
            this.charge = _data["charge"];
            this.comment = _data["comment"];
            this.userId = _data["userId"];
            this.serviceType = _data["serviceType"] ? ServiceTypeViewModel.fromJS(_data["serviceType"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceTypeChargeViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceTypeId"] = this.serviceTypeId;
        data["status"] = this.status;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : undefined;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : undefined;
        data["cost"] = this.cost;
        data["charge"] = this.charge;
        data["comment"] = this.comment;
        data["userId"] = this.userId;
        data["serviceType"] = this.serviceType ? this.serviceType.toJSON() : undefined;
        return data;
    }
}
export class DataTypeViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.category = _data["category"];
            this.valueTypeName = _data["valueTypeName"];
            this.defaultValue = _data["defaultValue"];
            this.data = _data["data"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataTypeViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["category"] = this.category;
        data["valueTypeName"] = this.valueTypeName;
        data["defaultValue"] = this.defaultValue;
        data["data"] = this.data;
        return data;
    }
}
export var DataTypeCategory;
(function (DataTypeCategory) {
    DataTypeCategory[DataTypeCategory["None"] = 1] = "None";
    DataTypeCategory[DataTypeCategory["Setting"] = 2] = "Setting";
    DataTypeCategory[DataTypeCategory["Service"] = 4] = "Service";
    DataTypeCategory[DataTypeCategory["Statistics"] = 8] = "Statistics";
    DataTypeCategory[DataTypeCategory["Result"] = 16] = "Result";
    DataTypeCategory[DataTypeCategory["Dependency"] = 32] = "Dependency";
    DataTypeCategory[DataTypeCategory["Verification"] = 64] = "Verification";
    DataTypeCategory[DataTypeCategory["PreProcessor"] = 128] = "PreProcessor";
    DataTypeCategory[DataTypeCategory["Processor"] = 256] = "Processor";
    DataTypeCategory[DataTypeCategory["PostProcessor"] = 512] = "PostProcessor";
})(DataTypeCategory || (DataTypeCategory = {}));
export class EnumDataViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.info = _data["info"];
            this.icon = _data["icon"];
            this.color = _data["color"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EnumDataViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["name"] = this.name;
        data["value"] = this.value;
        data["description"] = this.description;
        data["info"] = this.info;
        data["icon"] = this.icon;
        data["color"] = this.color;
        return data;
    }
}
export var EnumType;
(function (EnumType) {
    EnumType[EnumType["EnumType"] = 0] = "EnumType";
    EnumType[EnumType["DataTypeCategory"] = 1] = "DataTypeCategory";
    EnumType[EnumType["ProjectStatus"] = 10] = "ProjectStatus";
    EnumType[EnumType["ServiceOptions"] = 13] = "ServiceOptions";
    EnumType[EnumType["ServiceStatus"] = 14] = "ServiceStatus";
    EnumType[EnumType["ProjectUserStatus"] = 15] = "ProjectUserStatus";
    EnumType[EnumType["LinkType"] = 16] = "LinkType";
    EnumType[EnumType["ConstraintType"] = 17] = "ConstraintType";
    EnumType[EnumType["ConstraintStatus"] = 18] = "ConstraintStatus";
    EnumType[EnumType["ConstraintIntervalType"] = 19] = "ConstraintIntervalType";
    EnumType[EnumType["DocumentStatus"] = 21] = "DocumentStatus";
    EnumType[EnumType["UsageType"] = 22] = "UsageType";
    EnumType[EnumType["ProjectDocumentLink"] = 23] = "ProjectDocumentLink";
    EnumType[EnumType["ParameterDefinitionCategory"] = 24] = "ParameterDefinitionCategory";
    EnumType[EnumType["ParameterDefinitionStatus"] = 26] = "ParameterDefinitionStatus";
    EnumType[EnumType["DocumentDataType"] = 27] = "DocumentDataType";
    EnumType[EnumType["ChargeStatus"] = 29] = "ChargeStatus";
    EnumType[EnumType["ServiceEventType"] = 30] = "ServiceEventType";
    EnumType[EnumType["ServiceEventStatus"] = 31] = "ServiceEventStatus";
    EnumType[EnumType["BundleType"] = 35] = "BundleType";
    EnumType[EnumType["PaymentStatus"] = 41] = "PaymentStatus";
    EnumType[EnumType["VerificationStatus"] = 50] = "VerificationStatus";
    EnumType[EnumType["FieldRequired"] = 51] = "FieldRequired";
    EnumType[EnumType["VerificationType"] = 52] = "VerificationType";
    EnumType[EnumType["Availability"] = 55] = "Availability";
    EnumType[EnumType["WorkItemType"] = 60] = "WorkItemType";
    EnumType[EnumType["WorkItemStatus"] = 61] = "WorkItemStatus";
    EnumType[EnumType["WorkItemAction"] = 62] = "WorkItemAction";
    EnumType[EnumType["WorkItemMethod"] = 63] = "WorkItemMethod";
    EnumType[EnumType["NotificationType"] = 70] = "NotificationType";
    EnumType[EnumType["NotificationStatus"] = 71] = "NotificationStatus";
    EnumType[EnumType["NotificationEvent"] = 72] = "NotificationEvent";
    EnumType[EnumType["SettingType"] = 80] = "SettingType";
    EnumType[EnumType["SettingStatus"] = 81] = "SettingStatus";
    EnumType[EnumType["MarkingType"] = 85] = "MarkingType";
    EnumType[EnumType["Orientation"] = 86] = "Orientation";
    EnumType[EnumType["ReferenceType"] = 90] = "ReferenceType";
    EnumType[EnumType["ValueType"] = 91] = "ValueType";
    EnumType[EnumType["GroupingType"] = 92] = "GroupingType";
    EnumType[EnumType["OptionStatusFlags"] = 95] = "OptionStatusFlags";
    EnumType[EnumType["RatingType"] = 96] = "RatingType";
    EnumType[EnumType["UserGroupType"] = 100] = "UserGroupType";
    EnumType[EnumType["UserGroupStatus"] = 101] = "UserGroupStatus";
    EnumType[EnumType["WizardState"] = 1000] = "WizardState";
    EnumType[EnumType["WizardType"] = 1001] = "WizardType";
    EnumType[EnumType["SortField"] = 2000] = "SortField";
    EnumType[EnumType["SortDirection"] = 2001] = "SortDirection";
})(EnumType || (EnumType = {}));
export class BackgoundWorkItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.connId = _data["connId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.info = _data["info"];
            this.exception = _data["exception"];
            this.progress = _data["progress"];
            this.start = _data["start"] ? new Date(_data["start"].toString()) : undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BackgoundWorkItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["connId"] = this.connId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["info"] = this.info;
        data["exception"] = this.exception;
        data["progress"] = this.progress;
        data["start"] = this.start ? this.start.toISOString() : undefined;
        data["end"] = this.end ? this.end.toISOString() : undefined;
        return data;
    }
}
export class LogEvent {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : undefined;
            this.level = _data["level"];
            this.message = _data["message"];
            this.exception = _data["exception"];
            this.context = _data["context"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LogEvent();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : undefined;
        data["level"] = this.level;
        data["message"] = this.message;
        data["exception"] = this.exception;
        data["context"] = this.context;
        return data;
    }
}
export class SettingViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.status = _data["status"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SettingViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["key"] = this.key;
        data["description"] = this.description;
        data["value"] = this.value;
        data["status"] = this.status;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        return data;
    }
}
export class VerificationSummary extends VerificationViewModel {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.paramDefId = _data["paramDefId"];
            this.paramDefName = _data["paramDefName"];
            this.projectId = _data["projectId"];
            this.projectName = _data["projectName"];
            this.docId = _data["docId"];
            this.docFileName = _data["docFileName"];
            this.docContentType = _data["docContentType"];
            this.docUsage = _data["docUsage"];
            this.docStatus = _data["docStatus"];
            this.classId = _data["classId"];
            this.className = _data["className"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.count = _data["count"];
            this.average = _data["average"];
            this.min = _data["min"];
            this.max = _data["max"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VerificationSummary();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["paramDefId"] = this.paramDefId;
        data["paramDefName"] = this.paramDefName;
        data["projectId"] = this.projectId;
        data["projectName"] = this.projectName;
        data["docId"] = this.docId;
        data["docFileName"] = this.docFileName;
        data["docContentType"] = this.docContentType;
        data["docUsage"] = this.docUsage;
        data["docStatus"] = this.docStatus;
        data["classId"] = this.classId;
        data["className"] = this.className;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["dayOfWeek"] = this.dayOfWeek;
        data["count"] = this.count;
        data["average"] = this.average;
        data["min"] = this.min;
        data["max"] = this.max;
        super.toJSON(data);
        return data;
    }
}
export var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
    DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
    DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
    DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
    DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
    DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
    DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
})(DayOfWeek || (DayOfWeek = {}));
export class Wizard {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.index = _data["index"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.state = _data["state"];
            this.info = _data["info"];
            this.error = _data["error"];
            this.warning = _data["warning"];
            this.information = _data["information"];
            this.stpd = _data["stpd"] ? ParameterDefViewModel.fromJS(_data["stpd"]) : undefined;
            this.dependencyPD = _data["dependencyPD"] ? ParameterDefViewModel.fromJS(_data["dependencyPD"]) : undefined;
            this.pd = _data["pd"] ? ParameterDefViewModel.fromJS(_data["pd"]) : undefined;
            this.removePDId = _data["removePDId"];
            this.docsCount = _data["docsCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Wizard();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        data["name"] = this.name;
        data["description"] = this.description;
        data["type"] = this.type;
        data["state"] = this.state;
        data["info"] = this.info;
        data["error"] = this.error;
        data["warning"] = this.warning;
        data["information"] = this.information;
        data["stpd"] = this.stpd ? this.stpd.toJSON() : undefined;
        data["dependencyPD"] = this.dependencyPD ? this.dependencyPD.toJSON() : undefined;
        data["pd"] = this.pd ? this.pd.toJSON() : undefined;
        data["removePDId"] = this.removePDId;
        data["docsCount"] = this.docsCount;
        return data;
    }
}
export var WizardType;
(function (WizardType) {
    WizardType[WizardType["Service"] = 0] = "Service";
    WizardType[WizardType["Dependency"] = 1] = "Dependency";
    WizardType[WizardType["Categories"] = 2] = "Categories";
    WizardType[WizardType["Class"] = 3] = "Class";
    WizardType[WizardType["Definition"] = 4] = "Definition";
    WizardType[WizardType["Training"] = 5] = "Training";
    WizardType[WizardType["Verification"] = 6] = "Verification";
    WizardType[WizardType["Analysis"] = 7] = "Analysis";
    WizardType[WizardType["Upload"] = 8] = "Upload";
    WizardType[WizardType["Labelling"] = 9] = "Labelling";
    WizardType[WizardType["Vendors"] = 10] = "Vendors";
    WizardType[WizardType["BusinessUnits"] = 11] = "BusinessUnits";
    WizardType[WizardType["PurchaseOrders"] = 12] = "PurchaseOrders";
    WizardType[WizardType["PurchaseOrdersItems"] = 13] = "PurchaseOrdersItems";
    WizardType[WizardType["GLCodes"] = 14] = "GLCodes";
})(WizardType || (WizardType = {}));
export var WizardState;
(function (WizardState) {
    WizardState[WizardState["Complete"] = 0] = "Complete";
    WizardState[WizardState["Error"] = 1] = "Error";
    WizardState[WizardState["Partial"] = 2] = "Partial";
    WizardState[WizardState["Warning"] = 3] = "Warning";
})(WizardState || (WizardState = {}));
export var WorkItemType;
(function (WorkItemType) {
    WorkItemType[WorkItemType["None"] = 0] = "None";
    WorkItemType[WorkItemType["Document"] = 1] = "Document";
    WorkItemType[WorkItemType["Shred"] = 2] = "Shred";
    WorkItemType[WorkItemType["DataSet"] = 3] = "DataSet";
    WorkItemType[WorkItemType["Support"] = 4] = "Support";
    WorkItemType[WorkItemType["Error"] = 99] = "Error";
})(WorkItemType || (WorkItemType = {}));
export var WorkItemAction;
(function (WorkItemAction) {
    WorkItemAction[WorkItemAction["None"] = 0] = "None";
    WorkItemAction[WorkItemAction["Verify"] = 1] = "Verify";
    WorkItemAction[WorkItemAction["Investigate"] = 2] = "Investigate";
    WorkItemAction[WorkItemAction["Forensic"] = 3] = "Forensic";
    WorkItemAction[WorkItemAction["Fraudulant"] = 4] = "Fraudulant";
    WorkItemAction[WorkItemAction["Classify"] = 5] = "Classify";
    WorkItemAction[WorkItemAction["Reprocess"] = 10] = "Reprocess";
})(WorkItemAction || (WorkItemAction = {}));
export var WorkItemStatus;
(function (WorkItemStatus) {
    WorkItemStatus[WorkItemStatus["None"] = 0] = "None";
    WorkItemStatus[WorkItemStatus["Created"] = 1] = "Created";
    WorkItemStatus[WorkItemStatus["Completed"] = 2] = "Completed";
    WorkItemStatus[WorkItemStatus["EscalateTx"] = 3] = "EscalateTx";
    WorkItemStatus[WorkItemStatus["EscalateRx"] = 4] = "EscalateRx";
    WorkItemStatus[WorkItemStatus["Transfer"] = 5] = "Transfer";
    WorkItemStatus[WorkItemStatus["Received"] = 6] = "Received";
    WorkItemStatus[WorkItemStatus["Verified"] = 8] = "Verified";
    WorkItemStatus[WorkItemStatus["RelatedVerified"] = 9] = "RelatedVerified";
    WorkItemStatus[WorkItemStatus["Rejected"] = 10] = "Rejected";
    WorkItemStatus[WorkItemStatus["Deleted"] = 90] = "Deleted";
    WorkItemStatus[WorkItemStatus["Error"] = 99] = "Error";
})(WorkItemStatus || (WorkItemStatus = {}));
export class WorkItemViewModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.puId = _data["puId"];
            this.serviceId = _data["serviceId"];
            this.documentId = _data["documentId"];
            this.defId = _data["defId"];
            this.shredId = _data["shredId"];
            this.verificationId = _data["verificationId"];
            this.transactionId = _data["transactionId"];
            this.workItemId = _data["workItemId"];
            this.type = _data["type"];
            this.action = _data["action"];
            this.status = _data["status"];
            this.method = _data["method"];
            this.info = _data["info"];
            this.comment = _data["comment"];
            this.dtc = _data["dtc"] ? new Date(_data["dtc"].toString()) : undefined;
            this.dtm = _data["dtm"] ? new Date(_data["dtm"].toString()) : undefined;
            this.dueDate = _data["dueDate"] ? new Date(_data["dueDate"].toString()) : undefined;
            this.open = _data["open"] ? new Date(_data["open"].toString()) : undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : undefined;
            this.duration = _data["duration"];
            this.pu = _data["pu"] ? ProjectUserViewModel.fromJS(_data["pu"]) : undefined;
            this.service = _data["service"] ? ParameterDefViewModel.fromJS(_data["service"]) : undefined;
            this.document = _data["document"] ? DocumentViewModel.fromJS(_data["document"]) : undefined;
            this.shred = _data["shred"] ? DocumentParameterViewModel.fromJS(_data["shred"]) : undefined;
            this.def = _data["def"] ? ParameterDefViewModel.fromJS(_data["def"]) : undefined;
            this.verification = _data["verification"] ? VerificationViewModel.fromJS(_data["verification"]) : undefined;
            this.parent = _data["parent"] ? WorkItemViewModel.fromJS(_data["parent"]) : undefined;
            this.project = _data["project"] ? ProjectViewModel.fromJS(_data["project"]) : undefined;
            this.user = _data["user"] ? UserViewModel.fromJS(_data["user"]) : undefined;
            this.docCategory = _data["docCategory"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new WorkItemViewModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["puId"] = this.puId;
        data["serviceId"] = this.serviceId;
        data["documentId"] = this.documentId;
        data["defId"] = this.defId;
        data["shredId"] = this.shredId;
        data["verificationId"] = this.verificationId;
        data["transactionId"] = this.transactionId;
        data["workItemId"] = this.workItemId;
        data["type"] = this.type;
        data["action"] = this.action;
        data["status"] = this.status;
        data["method"] = this.method;
        data["info"] = this.info;
        data["comment"] = this.comment;
        data["dtc"] = this.dtc ? this.dtc.toISOString() : undefined;
        data["dtm"] = this.dtm ? this.dtm.toISOString() : undefined;
        data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined;
        data["open"] = this.open ? this.open.toISOString() : undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : undefined;
        data["duration"] = this.duration;
        data["pu"] = this.pu ? this.pu.toJSON() : undefined;
        data["service"] = this.service ? this.service.toJSON() : undefined;
        data["document"] = this.document ? this.document.toJSON() : undefined;
        data["shred"] = this.shred ? this.shred.toJSON() : undefined;
        data["def"] = this.def ? this.def.toJSON() : undefined;
        data["verification"] = this.verification ? this.verification.toJSON() : undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["project"] = this.project ? this.project.toJSON() : undefined;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["docCategory"] = this.docCategory;
        return data;
    }
}
export var WorkItemMethod;
(function (WorkItemMethod) {
    WorkItemMethod[WorkItemMethod["Random"] = 0] = "Random";
    WorkItemMethod[WorkItemMethod["HighThroughput"] = 1] = "HighThroughput";
    WorkItemMethod[WorkItemMethod["Idle"] = 2] = "Idle";
    WorkItemMethod[WorkItemMethod["ProjectOwner"] = 3] = "ProjectOwner";
    WorkItemMethod[WorkItemMethod["DocumentOwner"] = 4] = "DocumentOwner";
    WorkItemMethod[WorkItemMethod["User"] = 5] = "User";
})(WorkItemMethod || (WorkItemMethod = {}));
export class WorkFlowSummary {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.projectId = _data["projectId"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.serviceId = _data["serviceId"];
            this.defId = _data["defId"];
            this.docId = _data["docId"];
            this.filename = _data["filename"];
            this.docStatus = _data["docStatus"];
            this.docUsage = _data["docUsage"];
            this.docClassId = _data["docClassId"];
            this.docClassName = _data["docClassName"];
            this.action = _data["action"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.method = _data["method"];
            this.dt = _data["dt"] ? new Date(_data["dt"].toString()) : undefined;
            this.duration = _data["duration"];
            this.activeDuration = _data["activeDuration"];
            this.count = _data["count"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new WorkFlowSummary();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["projectId"] = this.projectId;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["serviceId"] = this.serviceId;
        data["defId"] = this.defId;
        data["docId"] = this.docId;
        data["filename"] = this.filename;
        data["docStatus"] = this.docStatus;
        data["docUsage"] = this.docUsage;
        data["docClassId"] = this.docClassId;
        data["docClassName"] = this.docClassName;
        data["action"] = this.action;
        data["type"] = this.type;
        data["status"] = this.status;
        data["method"] = this.method;
        data["dt"] = this.dt ? this.dt.toISOString() : undefined;
        data["duration"] = this.duration;
        data["activeDuration"] = this.activeDuration;
        data["count"] = this.count;
        return data;
    }
}
export class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    throw new ApiException(message, status, response, headers, result);
}
//# sourceMappingURL=AIForgedSDK.js.map